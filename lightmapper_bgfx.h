/***********************************************************
* lightmapper_bgfx.h : A bgfx port of lightmapper.h        *
* https://github.com/andr3wmac/lightmapper_bgfx            *
* no warranty implied | use at your own risk               *
* author: Andrew Mac (andr3wmac) | last change: 07.08.2016 *
*                                                          *
* A single header file OpenGL lightmapping library         *
* https://github.com/ands/lightmapper                      *
* no warranty implied | use at your own risk               *
* author: Andreas Mantler (ands) | last change: 14.05.2016 *
*                                                          *
* License:                                                 *
* This software is in the public domain.                   *
* Where that dedication is not recognized,                 *
* you are granted a perpetual, irrevocable license to copy *
* and modify this file however you want.                   *
***********************************************************/

// TODO: accept different primitive types
// TODO: maybe load the modern opengl calls? check version/extensions?

#ifndef LIGHTMAPPER_H
#define LIGHTMAPPER_H

#ifdef __cplusplus
#define LM_DEFAULT_VALUE(value) = value
#else
#define LM_DEFAULT_VALUE(value)
#endif

#ifndef LM_CALLOC
#define LM_CALLOC(count, size) calloc(count, size)
#endif

#ifndef LM_FREE
#define LM_FREE(ptr) free(ptr)
#endif

typedef int lm_bool;
#define LM_FALSE 0
#define LM_TRUE  1

typedef int lm_type;
#define LM_NONE           0
#define LM_UNSIGNED_BYTE  1
#define LM_UNSIGNED_SHORT 2
#define LM_UNSIGNED_INT   3
#define LM_FLOAT          4

typedef struct lm_context lm_context;

// creates a lightmapper instance. it can be used to render multiple lightmaps.
lm_context *lmCreate(
	int hemisphereSize,                                                                                // hemisphereSize: resolution of the hemisphere renderings. must be a power of two! typical: 64.
	float zNear, float zFar,                                                                           // zNear/zFar: hemisphere min/max draw distances.
	float clearR, float clearG, float clearB,                                                          // clear color / background color / sky color.
	uint8_t bgfxViewBegin, uint8_t bgfxViewEnd,                                                        // bgfx view begin / bgfx view end.
	bool leftHanded);                                                                                  // left or right handed coordinate system.

// optional: set material characteristics by specifying cos(theta)-dependent weights for incoming light.
typedef float (*lm_weight_func)(float cos_theta, void *userdata);
void lmSetHemisphereWeights(lm_context *ctx, lm_weight_func f, void *userdata);                        // precalculates weights for incoming light depending on its angle. (default: all weights are 1.0f)

// specify an output lightmap image buffer with w * h * c * sizeof(float) bytes of memory.
void lmSetTargetLightmap(lm_context *ctx, float *outLightmap, int w, int h, int c);                    // output HDR lightmap (linear 32bit float channels; c: 1->Greyscale, 2->Greyscale+Alpha, 3->RGB, 4->RGBA).

// set the geometry to map to the currently set target lightmap (set the target lightmap before calling this!).
void lmSetGeometry(lm_context *ctx,
	const float *transformationMatrix,                                                                 // 4x4 object-to-world transform for the geometry or NULL (no transformation).
	lm_type positionsType, const void *positionsXYZ, int positionsStride,                              // triangle mesh in object space.
	lm_type lightmapCoordsType, const void *lightmapCoordsUV, int lightmapCoordsStride,                // lightmap atlas texture coordinates for the mesh [0..1]x[0..1] (integer types are normalized to 0..1 range).
	int count, lm_type indicesType LM_DEFAULT_VALUE(LM_NONE), const void *indices LM_DEFAULT_VALUE(0));// if mesh indices are used, count = number of indices else count = number of vertices.


// as long as lmBegin returns true, the scene has to be rendered with the
// returned camera and view parameters to the currently bound framebuffer.
// if lmBegin returns true, it must be followed by lmEnd after rendering!
lm_bool lmBegin(lm_context *ctx,
	int* outViewport4,                                                                                 // output of the current viewport: { x, y, w, h }. use these to call glViewport()!
	float* outView4x4,                                                                                 // output of the current camera view matrix.
	float* outProjection4x4);                                                                          // output of the current camera projection matrix.

int lmProgress(lm_context *ctx);                                                                       // should only be called between lmBegin/lmEnd!
                                                                                                       // provides the currently processed triangle base index for the index/vertex array.

void lmEnd(lm_context *ctx);

// destroys the lightmapper instance. should be called to free resources.
void lmDestroy(lm_context *ctx);


// image based post processing (c is the number of color channels in the image, m a channel mask for the operation)
#define LM_ALL_CHANNELS 0x0f
float lmImageMin(const float *image, int w, int h, int c, int m LM_DEFAULT_VALUE(LM_ALL_CHANNELS));                    // find the minimum value (across the specified channels)
float lmImageMax(const float *image, int w, int h, int c, int m LM_DEFAULT_VALUE(LM_ALL_CHANNELS));                    // find the maximum value (across the specified channels)
void lmImageAdd(float *image, int w, int h, int c, float value, int m LM_DEFAULT_VALUE(LM_ALL_CHANNELS));              // in-place add to the specified channels
void lmImageScale(float *image, int w, int h, int c, float factor, int m LM_DEFAULT_VALUE(LM_ALL_CHANNELS));           // in-place scaling of the specified channels
void lmImagePower(float *image, int w, int h, int c, float exponent, int m LM_DEFAULT_VALUE(LM_ALL_CHANNELS));         // in-place powf(v, exponent) of the specified channels (for gamma)
void lmImageDilate(const float *image, float *outImage, int w, int h, int c);                                          // widen the populated non-zero areas by 1 pixel.
void lmImageSmooth(const float *image, float *outImage, int w, int h, int c);                                          // simple box filter on only the non-zero values.
void lmImageDownsample(const float *image, float *outImage, int w, int h, int c);                                      // downsamples [0..w]x[0..h] to [0..w/2]x[0..h/2] by avereging only the non-zero values
void lmImageFtoUB(const float *image, unsigned char *outImage, int w, int h, int c, float max LM_DEFAULT_VALUE(0.0f)); // casts a floating point image to an 8bit/channel image

// TGA file output helpers
lm_bool lmImageSaveTGAub(const char *filename, const unsigned char *image, int w, int h, int c);
lm_bool lmImageSaveTGAf(const char *filename, const float *image, int w, int h, int c, float max LM_DEFAULT_VALUE(0.0f));

#endif
////////////////////// END OF HEADER //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef LIGHTMAPPER_IMPLEMENTATION
#undef LIGHTMAPPER_IMPLEMENTATION

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <float.h>
#include <assert.h>
#include <limits.h>
#include <bgfx/bgfx.h>

// Debugging: Enable this to have TGAs output for each step.
#define LM_DEBUG 0

#define LM_BGFX_COLOR_RGBA(r,g,b,a) (uint32_t)((((r)&0xff)<<24)|(((g)&0xff)<<16)|(((b)&0xff)<<8)|((a)&0xff)<<0)
#define LM_SWAP(type, a, b) { type tmp = (a); (a) = (b); (b) = tmp; }

#if defined(_MSC_VER) && !defined(__cplusplus) // TODO: specific versions only?
#define inline __inline
#endif

#if defined(_MSC_VER) && (_MSC_VER <= 1700)
static inline lm_bool lm_finite(float a) { return _finite(a); }
#else
static inline lm_bool lm_finite(float a) { return isfinite(a); }
#endif

static inline int      lm_mini      (int     a, int     b) { return a < b ? a : b; }
static inline int      lm_maxi      (int     a, int     b) { return a > b ? a : b; }
static inline int      lm_absi      (int     a           ) { return a < 0 ? -a : a; }
static inline float    lm_minf      (float   a, float   b) { return a < b ? a : b; }
static inline float    lm_maxf      (float   a, float   b) { return a > b ? a : b; }
static inline float    lm_absf      (float   a           ) { return a < 0.0f ? -a : a; }

typedef struct lm_ivec2 { int x, y; } lm_ivec2;
static inline lm_ivec2 lm_i2        (int     x, int     y) { lm_ivec2 v = { x, y }; return v; }

typedef struct lm_vec2 { float x, y; } lm_vec2;
static inline lm_vec2  lm_v2i       (int     x, int     y) { lm_vec2 v = { (float)x, (float)y }; return v; }
static inline lm_vec2  lm_v2        (float   x, float   y) { lm_vec2 v = { x, y }; return v; }
static inline lm_vec2  lm_negate2   (lm_vec2 a           ) { return lm_v2(-a.x, -a.y); }
static inline lm_vec2  lm_add2      (lm_vec2 a, lm_vec2 b) { return lm_v2(a.x + b.x, a.y + b.y); }
static inline lm_vec2  lm_sub2      (lm_vec2 a, lm_vec2 b) { return lm_v2(a.x - b.x, a.y - b.y); }
static inline lm_vec2  lm_mul2      (lm_vec2 a, lm_vec2 b) { return lm_v2(a.x * b.x, a.y * b.y); }
static inline lm_vec2  lm_scale2    (lm_vec2 a, float   b) { return lm_v2(a.x * b, a.y * b); }
static inline lm_vec2  lm_div2      (lm_vec2 a, float   b) { return lm_scale2(a, 1.0f / b); }
static inline lm_vec2  lm_min2      (lm_vec2 a, lm_vec2 b) { return lm_v2(lm_minf(a.x, b.x), lm_minf(a.y, b.y)); }
static inline lm_vec2  lm_max2      (lm_vec2 a, lm_vec2 b) { return lm_v2(lm_maxf(a.x, b.x), lm_maxf(a.y, b.y)); }
static inline lm_vec2  lm_floor2    (lm_vec2 a           ) { return lm_v2(floorf(a.x), floorf(a.y)); }
static inline lm_vec2  lm_ceil2     (lm_vec2 a           ) { return lm_v2(ceilf (a.x), ceilf (a.y)); }
static inline float    lm_dot2      (lm_vec2 a, lm_vec2 b) { return a.x * b.x + a.y * b.y; }
static inline float    lm_cross2    (lm_vec2 a, lm_vec2 b) { return a.x * b.y - a.y * b.x; } // pseudo cross product
static inline float    lm_length2sq (lm_vec2 a           ) { return a.x * a.x + a.y * a.y; }
static inline float    lm_length2   (lm_vec2 a           ) { return sqrtf(lm_length2sq(a)); }
static inline lm_vec2  lm_normalize2(lm_vec2 a           ) { return lm_div2(a, lm_length2(a)); }
static inline lm_bool  lm_finite2   (lm_vec2 a           ) { return lm_finite(a.x) && lm_finite(a.y); }

typedef struct lm_vec3 { float x, y, z; } lm_vec3;
static inline lm_vec3  lm_v3        (float   x, float   y, float   z) { lm_vec3 v = { x, y, z }; return v; }
static inline lm_vec3  lm_negate3   (lm_vec3 a           ) { return lm_v3(-a.x, -a.y, -a.z); }
static inline lm_vec3  lm_add3      (lm_vec3 a, lm_vec3 b) { return lm_v3(a.x + b.x, a.y + b.y, a.z + b.z); }
static inline lm_vec3  lm_sub3      (lm_vec3 a, lm_vec3 b) { return lm_v3(a.x - b.x, a.y - b.y, a.z - b.z); }
static inline lm_vec3  lm_mul3      (lm_vec3 a, lm_vec3 b) { return lm_v3(a.x * b.x, a.y * b.y, a.z * b.z); }
static inline lm_vec3  lm_scale3    (lm_vec3 a, float   b) { return lm_v3(a.x * b, a.y * b, a.z * b); }
static inline lm_vec3  lm_div3      (lm_vec3 a, float   b) { return lm_scale3(a, 1.0f / b); }
static inline lm_vec3  lm_min3      (lm_vec3 a, lm_vec3 b) { return lm_v3(lm_minf(a.x, b.x), lm_minf(a.y, b.y), lm_minf(a.z, b.z)); }
static inline lm_vec3  lm_max3      (lm_vec3 a, lm_vec3 b) { return lm_v3(lm_maxf(a.x, b.x), lm_maxf(a.y, b.y), lm_maxf(a.z, b.z)); }
static inline lm_vec3  lm_floor3    (lm_vec3 a           ) { return lm_v3(floorf(a.x), floorf(a.y), floorf(a.z)); }
static inline lm_vec3  lm_ceil3     (lm_vec3 a           ) { return lm_v3(ceilf (a.x), ceilf (a.y), ceilf (a.z)); }
static inline float    lm_dot3      (lm_vec3 a, lm_vec3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
static inline lm_vec3  lm_cross3    (lm_vec3 a, lm_vec3 b) { return lm_v3(a.y * b.z - b.y * a.z, a.z * b.x - b.z * a.x, a.x * b.y - b.x * a.y); }
static inline float    lm_length3sq (lm_vec3 a           ) { return a.x * a.x + a.y * a.y + a.z * a.z; }
static inline float    lm_length3   (lm_vec3 a           ) { return sqrtf(lm_length3sq(a)); }
static inline lm_vec3  lm_normalize3(lm_vec3 a           ) { return lm_div3(a, lm_length3(a)); }
static inline lm_bool  lm_finite3   (lm_vec3 a           ) { return lm_finite(a.x) && lm_finite(a.y) && lm_finite(a.z); }

static lm_vec2 lm_toBarycentric(lm_vec2 p1, lm_vec2 p2, lm_vec2 p3, lm_vec2 p)
{
	// http://www.blackpawn.com/texts/pointinpoly/
	// Compute vectors
	lm_vec2 v0 = lm_sub2(p3, p1);
	lm_vec2 v1 = lm_sub2(p2, p1);
	lm_vec2 v2 = lm_sub2(p, p1);
	// Compute dot products
	float dot00 = lm_dot2(v0, v0);
	float dot01 = lm_dot2(v0, v1);
	float dot02 = lm_dot2(v0, v2);
	float dot11 = lm_dot2(v1, v1);
	float dot12 = lm_dot2(v1, v2);
	// Compute barycentric coordinates
	float invDenom = 1.0f / (dot00 * dot11 - dot01 * dot01);
	float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	float v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return lm_v2(u, v);
}

static inline int lm_leftOf(lm_vec2 a, lm_vec2 b, lm_vec2 c)
{
	float x = lm_cross2(lm_sub2(b, a), lm_sub2(c, b));
	return x < 0 ? -1 : x > 0;
}

static lm_bool lm_lineIntersection(lm_vec2 x0, lm_vec2 x1, lm_vec2 y0, lm_vec2 y1, lm_vec2* res)
{
	lm_vec2 dx = lm_sub2(x1, x0);
	lm_vec2 dy = lm_sub2(y1, y0);
	lm_vec2 d = lm_sub2(x0, y0);
	float dyx = lm_cross2(dy, dx);
	if (dyx == 0.0f)
		return LM_FALSE;
	dyx = lm_cross2(d, dx) / dyx;
	if (dyx <= 0 || dyx >= 1)
		return LM_FALSE;
	res->x = y0.x + dyx * dy.x;
	res->y = y0.y + dyx * dy.y;
	return LM_TRUE;
}

// this modifies the poly array! the poly array must be big enough to hold the result!
// res must be big enough to hold the result!
static int lm_convexClip(lm_vec2 *poly, int nPoly, const lm_vec2 *clip, int nClip, lm_vec2 *res)
{
	int nRes = nPoly;
	int dir = lm_leftOf(clip[0], clip[1], clip[2]);
	for (int i = 0, j = nClip - 1; i < nClip && nRes; j = i++)
	{
		if (i != 0)
			for (nPoly = 0; nPoly < nRes; nPoly++)
				poly[nPoly] = res[nPoly];
		nRes = 0;
		lm_vec2 v0 = poly[nPoly - 1];
		int side0 = lm_leftOf(clip[j], clip[i], v0);
		if (side0 != -dir)
			res[nRes++] = v0;
		for (int k = 0; k < nPoly; k++)
		{
			lm_vec2 v1 = poly[k], x;
			int side1 = lm_leftOf(clip[j], clip[i], v1);
			if (side0 + side1 == 0 && side0 && lm_lineIntersection(clip[j], clip[i], v0, v1, &x))
				res[nRes++] = x;
			if (k == nPoly - 1)
				break;
			if (side1 != -dir)
				res[nRes++] = v1;
			v0 = v1;
			side0 = side1;
		}
	}

	return nRes;
}

struct lm_screenSpaceVertex
{
	float m_x;
	float m_y;
	float m_z;
	float m_u;
	float m_v;

	static void init()
	{
		ms_decl
			.begin()
			.add(bgfx::Attrib::Position, 3, bgfx::AttribType::Float)
			.add(bgfx::Attrib::TexCoord0, 2, bgfx::AttribType::Float)
			.end();
	}

	static bgfx::VertexDecl ms_decl;
};

bgfx::VertexDecl lm_screenSpaceVertex::ms_decl;

static void lm_screenSpaceQuad(float _textureWidth, float _textureHeight, float _texelHalf, bool _originBottomLeft, float _width = 1.0f, float _height = 1.0f)
{
	if (bgfx::checkAvailTransientVertexBuffer(3, lm_screenSpaceVertex::ms_decl))
	{
		bgfx::TransientVertexBuffer vb;
		bgfx::allocTransientVertexBuffer(&vb, 3, lm_screenSpaceVertex::ms_decl);
		lm_screenSpaceVertex* vertex = (lm_screenSpaceVertex*)vb.data;

		const float minx = -_width;
		const float maxx = _width;
		const float miny = 0.0f;
		const float maxy = _height*2.0f;

		const float texelHalfW = _texelHalf / _textureWidth;
		const float texelHalfH = _texelHalf / _textureHeight;
		const float minu = -1.0f + texelHalfW;
		const float maxu = 1.0f + texelHalfH;

		const float zz = 0.0f;

		float minv = texelHalfH;
		float maxv = 2.0f + texelHalfH;

		if (_originBottomLeft)
		{
			float temp = minv;
			minv = maxv;
			maxv = temp;

			minv -= 1.0f;
			maxv -= 1.0f;
		}

		vertex[0].m_x = minx;
		vertex[0].m_y = miny;
		vertex[0].m_z = zz;
		vertex[0].m_u = minu;
		vertex[0].m_v = minv;

		vertex[1].m_x = maxx;
		vertex[1].m_y = miny;
		vertex[1].m_z = zz;
		vertex[1].m_u = maxu;
		vertex[1].m_v = minv;

		vertex[2].m_x = maxx;
		vertex[2].m_y = maxy;
		vertex[2].m_z = zz;
		vertex[2].m_u = maxu;
		vertex[2].m_v = maxv;

		bgfx::setVertexBuffer(&vb);
	}
}

// weighted downsample fragment shader

/*
$input v_texcoord0

#include "../common/common.sh"

SAMPLER2D(lm_hemispheres, 0);
SAMPLER2D(lm_weights, 1);
uniform vec4 lm_textureSize; // [Hemi W, Hemi H, Weights W, Weights H]

vec4 weightedSample(vec2 h_uv, vec2 w_uv, vec2 quadrant)
{
	vec2 fh_uv 		= h_uv / lm_textureSize.rg;
	vec2 fw_uv 		= w_uv / lm_textureSize.ba;
	vec2 fquadrant 	= quadrant / lm_textureSize.rg;

	vec4 sample = texture2DLod(lm_hemispheres, fh_uv + fquadrant, 0);
	vec2 weight = texture2DLod(lm_weights, fw_uv + fquadrant, 0).rg;

	return vec4(sample.rgb * weight.r, sample.a * weight.g);
}

vec4 threeWeightedSamples(vec2 h_uv, vec2 w_uv, vec2 offset)
{
	// horizontal triple sum
	vec4 sum 	= weightedSample(h_uv, w_uv, offset);
	offset.x 	+= 2.0;
	sum 		+= weightedSample(h_uv, w_uv, offset);
	offset.x 	+= 2.0;
	sum 		+= weightedSample(h_uv, w_uv, offset);

	return sum;
}

void main()
{
	// this is a weighted sum downsampling pass (alpha component contains the weighted valid sample count)
	vec2 h_uv 	= gl_FragCoord.xy * vec2(6.0, 2.0) + vec2(0.5, 0.5);
	vec2 w_uv 	= vec2(mod(h_uv, lm_textureSize.ba));

	vec4 lb = threeWeightedSamples(h_uv, w_uv, vec2(0.0, 0.0));
	vec4 rb = threeWeightedSamples(h_uv, w_uv, vec2(1.0, 0.0));
	vec4 lt = threeWeightedSamples(h_uv, w_uv, vec2(0.0, 1.0));
	vec4 rt = threeWeightedSamples(h_uv, w_uv, vec2(1.0, 1.0));

	gl_FragColor = lb + rb + lt + rt;
}
*/

static const uint8_t lm_fs_weighted_downsample_dx9[4112] =
{
	0x46, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x03, 0x00, 0x0e, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // FSH.o.><...lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0e, // mispheres0......
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x01, // lm_textureSize..
	0x00, 0x00, 0x01, 0x00, 0x0a, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x30, // .....lm_weights0
	0x01, 0x01, 0x00, 0x01, 0x00, 0xc8, 0x0f, 0x00, 0x03, 0xff, 0xff, 0xfe, 0xff, 0x3d, 0x00, 0x43, // .............=.C
	0x54, 0x41, 0x42, 0x1c, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x03, // TAB.............
	0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x58, // ...............X
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, // ...........h....
	0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x88, // ...x............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, // ................
	0x00, 0x06, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // ...........lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x00, 0xab, 0x04, 0x00, 0x0c, 0x00, 0x01, // mispheres.......
	0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x5f, 0x74, 0x65, // ...........lm_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x00, 0xab, 0x01, 0x00, 0x03, 0x00, 0x01, // xtureSize.......
	0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x5f, 0x77, 0x65, // ...........lm_we
	0x69, 0x67, 0x68, 0x74, 0x73, 0x00, 0xab, 0x04, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, // ights...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x73, 0x5f, 0x33, 0x5f, 0x30, 0x00, 0x4d, 0x69, // .......ps_3_0.Mi
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53, 0x4c, // crosoft (R) HLSL
	0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, //  Shader Compiler
	0x20, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x30, 0x30, 0x31, 0x31, 0x2e, 0x31, 0x36, 0x33, 0x38, //  10.0.10011.1638
	0x34, 0x00, 0xab, 0x51, 0x00, 0x00, 0x05, 0x01, 0x00, 0x0f, 0xa0, 0x00, 0x00, 0xc0, 0x40, 0x00, // 4..Q..........@.
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x05, 0x02, // ..@...?....Q....
	0x00, 0x0f, 0xa0, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x40, 0x40, 0x00, // ......@...?..@@.
	0x00, 0xa0, 0x40, 0x51, 0x00, 0x00, 0x05, 0x03, 0x00, 0x0f, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, // ..@Q............
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x02, 0x00, // ..?...@.........
	0x00, 0x00, 0x80, 0x00, 0x10, 0x03, 0x90, 0x1f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x90, 0x00, // ................
	0x08, 0x0f, 0xa0, 0x1f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x90, 0x01, 0x08, 0x0f, 0xa0, 0x05, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x80, 0x01, 0x00, 0xe4, 0xa0, 0x00, 0x10, 0xe4, 0x90, 0x02, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xaa, 0xa0, 0x01, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x01, 0x00, 0x01, 0x80, 0x00, // ................
	0x00, 0xaa, 0x80, 0x06, 0x00, 0x00, 0x02, 0x01, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0x80, 0x05, // ................
	0x00, 0x00, 0x03, 0x01, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x13, // ................
	0x00, 0x00, 0x02, 0x01, 0x00, 0x0c, 0x80, 0x01, 0x00, 0x44, 0x80, 0x01, 0x00, 0x00, 0x02, 0x01, // .........D......
	0x00, 0x0c, 0x80, 0x01, 0x00, 0xe4, 0x81, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x03, 0x80, 0x01, // ................
	0x00, 0xee, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0c, 0x80, 0x00, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x44, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0c, 0x80, 0x00, // .....D..........
	0x00, 0xe4, 0x81, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x00, // ................
	0x00, 0x44, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, // .D..............
	0x00, 0x00, 0x02, 0x01, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x03, 0x80, 0x01, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x06, // ................
	0x00, 0x00, 0x02, 0x02, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x02, // ................
	0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x02, 0x00, 0x03, 0x80, 0x01, // .....U..........
	0x00, 0xe4, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x01, 0x80, 0x00, // ................
	0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, // ................
	0x00, 0x00, 0x03, 0x02, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x03, 0x00, 0x44, 0x80, 0x02, // .............D..
	0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x01, // ................
	0x00, 0x00, 0x02, 0x03, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x03, // ..........._....
	0x00, 0x0f, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x02, // ................
	0x00, 0x03, 0x80, 0x02, 0x00, 0xee, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x02, // ................
	0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x02, 0x00, 0x0f, 0x80, 0x02, // ......._........
	0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x03, 0x80, 0x02, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x04, 0x00, 0x07, 0x80, 0x02, 0x00, 0x00, 0x80, 0x03, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x04, 0x00, 0x08, 0x80, 0x02, 0x00, 0x55, 0x80, 0x03, // .............U..
	0x00, 0xff, 0x80, 0x01, 0x00, 0x00, 0x02, 0x04, 0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x06, // ................
	0x00, 0x00, 0x02, 0x02, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x02, // ................
	0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x02, 0x00, 0x03, 0x80, 0x01, // .....U..........
	0x00, 0xe4, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x01, 0x80, 0x00, // ................
	0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, // ................
	0x00, 0x00, 0x03, 0x02, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x03, 0x00, 0x44, 0x80, 0x06, // .............D..
	0x00, 0x00, 0x02, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x03, // ................
	0x00, 0x01, 0x80, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00, 0x55, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x03, // .........U......
	0x00, 0x02, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x05, 0x00, 0x03, 0x80, 0x02, // ................
	0x00, 0xe4, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x05, 0x00, 0x0c, 0x80, 0x01, // ................
	0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x05, 0x00, 0x0f, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x00, // ..._............
	0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x03, 0x80, 0x02, 0x00, 0xee, 0x80, 0x03, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, // ..............._
	0x00, 0x00, 0x03, 0x02, 0x00, 0x0f, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, // ................
	0x00, 0x00, 0x02, 0x02, 0x00, 0x03, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x03, // ................
	0x00, 0x07, 0x80, 0x02, 0x00, 0x00, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x03, // ................
	0x00, 0x08, 0x80, 0x02, 0x00, 0x55, 0x80, 0x05, 0x00, 0xff, 0x80, 0x02, 0x00, 0x00, 0x03, 0x02, // .....U..........
	0x00, 0x0f, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x03, // ................
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x02, 0x80, 0x00, // ................
	0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x01, 0x00, 0x03, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x03, // .U..............
	0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0xaa, 0xa0, 0x06, // ................
	0x00, 0x00, 0x02, 0x03, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x01, // ................
	0x00, 0x0c, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x03, 0x00, 0x44, 0x80, 0x06, 0x00, 0x00, 0x02, 0x03, // .........D......
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x03, 0x00, 0x01, 0x80, 0x03, // ................
	0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x02, 0x80, 0x01, // ................
	0x00, 0xff, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x03, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x04, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, // ..............._
	0x00, 0x00, 0x03, 0x04, 0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, // ................
	0x00, 0x00, 0x03, 0x01, 0x00, 0x03, 0x80, 0x01, 0x00, 0xee, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x01, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x01, // ..........._....
	0x00, 0x0f, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x01, // ................
	0x00, 0x03, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x03, 0x00, 0x07, 0x80, 0x01, // ................
	0x00, 0x00, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x03, 0x00, 0x08, 0x80, 0x01, // ................
	0x00, 0x55, 0x80, 0x04, 0x00, 0xff, 0x80, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x0f, 0x80, 0x02, // .U..............
	0x00, 0xe4, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x0f, 0x80, 0x01, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x0f, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x02, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x02, // ................
	0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x03, 0x80, 0x02, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x0c, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x06, // ................
	0x00, 0x00, 0x02, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x03, // ................
	0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x80, 0x02, // .....U..........
	0x00, 0xe4, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x01, 0x80, 0x00, // ................
	0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, // ................
	0x00, 0x00, 0x03, 0x03, 0x00, 0x0c, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x04, 0x00, 0x44, 0x80, 0x06, // .............D..
	0x00, 0x00, 0x02, 0x04, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x04, // ................
	0x00, 0x01, 0x80, 0x04, 0x00, 0x00, 0x80, 0x02, 0x00, 0x55, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x04, // .........U......
	0x00, 0x02, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x05, 0x00, 0x03, 0x80, 0x03, // ................
	0x00, 0xe4, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x05, 0x00, 0x0c, 0x80, 0x01, // ................
	0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x05, 0x00, 0x0f, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x00, // ..._............
	0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x80, 0x03, 0x00, 0xee, 0x80, 0x04, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, // ..............._
	0x00, 0x00, 0x03, 0x03, 0x00, 0x0f, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, // ................
	0x00, 0x00, 0x02, 0x03, 0x00, 0x03, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x04, // ................
	0x00, 0x07, 0x80, 0x03, 0x00, 0x00, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x04, // ................
	0x00, 0x08, 0x80, 0x03, 0x00, 0x55, 0x80, 0x05, 0x00, 0xff, 0x80, 0x01, 0x00, 0x00, 0x02, 0x04, // .....U..........
	0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x01, 0x80, 0x00, // ................
	0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, // .............U..
	0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x06, // ................
	0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, 0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, // ................
	0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x03, 0x00, 0x0c, 0x80, 0x02, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x44, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, // .....D..........
	0x00, 0x00, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x01, 0x80, 0x05, 0x00, 0x00, 0x80, 0x02, // ................
	0x00, 0xaa, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x02, // ................
	0x00, 0x00, 0x03, 0x06, 0x00, 0x03, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x06, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x06, // ..........._....
	0x00, 0x0f, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x03, // ................
	0x00, 0x03, 0x80, 0x03, 0x00, 0xee, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x03, // ................
	0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x03, 0x00, 0x0f, 0x80, 0x03, // ......._........
	0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x03, 0x80, 0x03, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x07, 0x80, 0x03, 0x00, 0x00, 0x80, 0x06, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x08, 0x80, 0x03, 0x00, 0x55, 0x80, 0x06, // .............U..
	0x00, 0xff, 0x80, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x05, // ................
	0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, // ................
	0x00, 0x00, 0x02, 0x04, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x02, // .........U......
	0x00, 0x03, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x04, // ................
	0x00, 0x01, 0x80, 0x00, 0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x02, 0x80, 0x00, // ................
	0x00, 0xff, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x02, 0x00, 0x0c, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x04, // ................
	0x00, 0x44, 0x80, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x05, // .D..............
	0x00, 0x00, 0x03, 0x04, 0x00, 0x01, 0x80, 0x04, 0x00, 0x00, 0x80, 0x02, 0x00, 0xff, 0xa0, 0x01, // ................
	0x00, 0x00, 0x02, 0x04, 0x00, 0x02, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x05, // ................
	0x00, 0x03, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x05, // ................
	0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x05, 0x00, 0x0f, 0x80, 0x05, // ......._........
	0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x03, 0x80, 0x02, // ................
	0x00, 0xee, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x0c, 0x80, 0x01, // ................
	0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x02, 0x00, 0x0f, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x01, // ..._............
	0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x03, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x05, // ................
	0x00, 0x00, 0x03, 0x04, 0x00, 0x07, 0x80, 0x02, 0x00, 0x00, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x05, // ................
	0x00, 0x00, 0x03, 0x04, 0x00, 0x08, 0x80, 0x02, 0x00, 0x55, 0x80, 0x05, 0x00, 0xff, 0x80, 0x02, // .........U......
	0x00, 0x00, 0x03, 0x02, 0x00, 0x0f, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x02, 0x00, 0x0f, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x02, // ................
	0x00, 0x0f, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x03, 0x80, 0x00, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x03, 0x00, 0x03, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x03, // ................
	0x00, 0x0c, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x01, 0x80, 0x00, // ................
	0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, // .............U..
	0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x06, // ................
	0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, 0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, // ................
	0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x04, 0x00, 0x0c, 0x80, 0x03, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x44, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, // .....D..........
	0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, // .............U..
	0x00, 0x00, 0x03, 0x05, 0x00, 0x03, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x03, 0x00, 0xe4, 0xa0, 0x02, // ................
	0x00, 0x00, 0x03, 0x06, 0x00, 0x03, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x06, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x06, // ..........._....
	0x00, 0x0f, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x04, // ................
	0x00, 0x03, 0x80, 0x04, 0x00, 0xee, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x04, // ................
	0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x04, 0x00, 0x0f, 0x80, 0x04, // ......._........
	0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x04, 0x00, 0x03, 0x80, 0x04, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x07, 0x80, 0x04, 0x00, 0x00, 0x80, 0x06, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x08, 0x80, 0x04, 0x00, 0x55, 0x80, 0x06, // .............U..
	0x00, 0xff, 0x80, 0x01, 0x00, 0x00, 0x02, 0x05, 0x00, 0x0f, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x06, // ................
	0x00, 0x00, 0x02, 0x04, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x04, // ................
	0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80, 0x03, // .....U..........
	0x00, 0xe4, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x06, 0x00, 0x01, 0x80, 0x00, // ................
	0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x06, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, // ................
	0x00, 0x00, 0x03, 0x04, 0x00, 0x0c, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x44, 0x80, 0x06, // .............D..
	0x00, 0x00, 0x02, 0x06, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x06, // ................
	0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x06, 0x00, 0x03, 0x80, 0x06, // .....U..........
	0x00, 0xe4, 0x80, 0x03, 0x00, 0xe6, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x07, 0x00, 0x03, 0x80, 0x04, // ................
	0x00, 0xe4, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x07, 0x00, 0x0c, 0x80, 0x01, // ................
	0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x07, 0x00, 0x0f, 0x80, 0x07, 0x00, 0xe4, 0x80, 0x00, // ..._............
	0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80, 0x04, 0x00, 0xee, 0x80, 0x06, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x04, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, // ..............._
	0x00, 0x00, 0x03, 0x04, 0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, // ................
	0x00, 0x00, 0x02, 0x04, 0x00, 0x03, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x06, // ................
	0x00, 0x07, 0x80, 0x04, 0x00, 0x00, 0x80, 0x07, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x06, // ................
	0x00, 0x08, 0x80, 0x04, 0x00, 0x55, 0x80, 0x07, 0x00, 0xff, 0x80, 0x02, 0x00, 0x00, 0x03, 0x04, // .....U..........
	0x00, 0x0f, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, // ................
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x00, // ................
	0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x05, // .U..............
	0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, 0x00, 0xaa, 0xa0, 0x06, // ................
	0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x03, // ................
	0x00, 0x0c, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x44, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, // .........D......
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x00, // ................
	0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x03, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x02, // .U..............
	0x00, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x06, 0x00, 0x03, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x05, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x06, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, // ..............._
	0x00, 0x00, 0x03, 0x06, 0x00, 0x0f, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, // ................
	0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x80, 0x03, 0x00, 0xee, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x03, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x03, // ..........._....
	0x00, 0x0f, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x03, // ................
	0x00, 0x03, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x07, 0x80, 0x03, // ................
	0x00, 0x00, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x08, 0x80, 0x03, // ................
	0x00, 0x55, 0x80, 0x06, 0x00, 0xff, 0x80, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x0f, 0x80, 0x04, // .U..............
	0x00, 0xe4, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x0f, 0x80, 0x03, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x0f, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0c, 0x80, 0x00, // ................
	0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, // ................
	0x00, 0x00, 0x02, 0x04, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x04, // .........U......
	0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, // ................
	0x00, 0x01, 0x80, 0x00, 0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x00, // ................
	0x00, 0xff, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x04, 0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x05, // ................
	0x00, 0x44, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, // .D..............
	0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x05, // .........U......
	0x00, 0x03, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x02, 0x00, 0x55, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x06, // .........U......
	0x00, 0x03, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x06, // ................
	0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x06, 0x00, 0x0f, 0x80, 0x06, // ......._........
	0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80, 0x04, // ................
	0x00, 0xee, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x04, 0x00, 0x0c, 0x80, 0x01, // ................
	0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x04, 0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x01, // ..._............
	0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x04, 0x00, 0x03, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x05, // ................
	0x00, 0x00, 0x03, 0x05, 0x00, 0x07, 0x80, 0x04, 0x00, 0x00, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x05, // ................
	0x00, 0x00, 0x03, 0x05, 0x00, 0x08, 0x80, 0x04, 0x00, 0x55, 0x80, 0x06, 0x00, 0xff, 0x80, 0x01, // .........U......
	0x00, 0x00, 0x02, 0x05, 0x00, 0x0f, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x04, // ................
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x02, 0x80, 0x00, // ................
	0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x04, // .U..............
	0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x06, 0x00, 0x01, 0x80, 0x00, 0x00, 0xaa, 0xa0, 0x06, // ................
	0x00, 0x00, 0x02, 0x06, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x04, // ................
	0x00, 0x0c, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x44, 0x80, 0x06, 0x00, 0x00, 0x02, 0x06, // .........D......
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x06, 0x00, 0x02, 0x80, 0x00, // ................
	0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x06, 0x00, 0x03, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x02, // .U..............
	0x00, 0xe6, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x07, 0x00, 0x03, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x06, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x07, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, // ..............._
	0x00, 0x00, 0x03, 0x07, 0x00, 0x0f, 0x80, 0x07, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, // ................
	0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80, 0x04, 0x00, 0xee, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x04, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x04, // ..........._....
	0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x04, // ................
	0x00, 0x03, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x06, 0x00, 0x07, 0x80, 0x04, // ................
	0x00, 0x00, 0x80, 0x07, 0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x06, 0x00, 0x08, 0x80, 0x04, // ................
	0x00, 0x55, 0x80, 0x07, 0x00, 0xff, 0x80, 0x02, 0x00, 0x00, 0x03, 0x04, 0x00, 0x0f, 0x80, 0x05, // .U..............
	0x00, 0xe4, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, // ................
	0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, // .............U..
	0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x06, // ................
	0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, 0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, // ................
	0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0c, 0x80, 0x00, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x44, 0x80, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x80, 0x00, // .....D..........
	0x00, 0x00, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x05, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, // .............U..
	0x00, 0x00, 0x03, 0x05, 0x00, 0x03, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x02, 0x00, 0xe7, 0xa0, 0x02, // ................
	0x00, 0x00, 0x03, 0x06, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x06, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x06, // ..........._....
	0x00, 0x0f, 0x80, 0x06, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x03, 0x80, 0x00, 0x00, 0xee, 0x80, 0x05, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0f, 0x80, 0x00, // ......._........
	0x00, 0xe4, 0x80, 0x01, 0x08, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x80, 0x00, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x80, 0x06, // ................
	0x00, 0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x05, 0x00, 0x08, 0x80, 0x00, 0x00, 0x55, 0x80, 0x06, // .............U..
	0x00, 0xff, 0x80, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x05, // ................
	0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x02, 0x00, 0x00, 0x03, 0x01, // ................
	0x00, 0x0f, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x02, 0x00, 0x00, 0x03, 0x01, // ................
	0x00, 0x0f, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x02, 0x00, 0x00, 0x03, 0x00, // ................
	0x08, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xe4, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, // ................
};

static const uint8_t lm_fs_weighted_downsample_dx11[6851] =
{
	0x46, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x03, 0x00, 0x0e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, // FSH.o.><...lm_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0e, // xtureSize.......
	0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x30, 0x01, // lm_hemispheres0.
	0x00, 0x00, 0x01, 0x00, 0x0a, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x30, // .....lm_weights0
	0x01, 0x01, 0x00, 0x01, 0x00, 0x78, 0x1a, 0x44, 0x58, 0x42, 0x43, 0x3c, 0x01, 0x6e, 0x0b, 0xc2, // .....x.DXBC<.n..
	0xa3, 0x92, 0x1e, 0x94, 0x96, 0xdf, 0xfd, 0xfc, 0x9a, 0x33, 0x8a, 0x01, 0x00, 0x00, 0x00, 0x78, // .........3.....x
	0x1a, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xb8, // .......,........
	0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, // ...ISGNP........
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, // ...8............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, // ...........D....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, // ...SV_POSITION.T
	0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, // EXCOORD....OSGN,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, // ........... ....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, // ................
	0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, // ...SV_TARGET...S
	0x48, 0x44, 0x52, 0xb8, 0x19, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x6e, 0x06, 0x00, 0x00, 0x59, // HDR....@...n...Y
	0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5a, // ...F. .........Z
	0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, // ....`......Z....
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, // `......X....p...
	0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, // ...UU..X....p...
	0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x64, 0x20, 0x00, 0x04, 0x32, 0x10, 0x10, 0x00, 0x00, // ...UU..d ..2....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, // .......e.... ...
	0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, // ...h.......8...2
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // @.....@...@.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......2.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, // ........@.....?.
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ..?........6...2
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x06, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x8e, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x01, // ...........2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, // ...F............
	0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...A...2.......F
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x00, // .......8........
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, // ...6............
	0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, // ...A............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ................
	0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x00, // .......6........
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...........6...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, // .......6...2....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xc2, // ...........6....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...2.......F....
	0x00, 0x00, 0x00, 0xe6, 0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..... ..........
	0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, // ...........+....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ...F~.......`...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...........6....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, // ...........+....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...........6...2
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...2.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, // ...8...r........
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...:.......6....
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, // ...B.......*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x36, 0x00, 0x00, 0x05, 0x42, // ....@.....@6...B
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, // .......*........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...2.......F....
	0x00, 0x00, 0x00, 0xe6, 0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..... ..........
	0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, // ...........+....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ...F~.......`...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...........6....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, // ...........+....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...........6...2
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...2.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, // ...8...r........
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, // ...:............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x01, // ...........B....
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...*........@...
	0x00, 0x00, 0x40, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, // ..@6...B.......*
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x01, // ...........2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x02, // ...........2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x8a, 0x20, 0x00, 0x00, // ...F......... ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x01, // ...........2....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, // ...........F....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, // ...+...B........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x04, // @......H........
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x02, // ....`......*....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, // ...6...........F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x01, // ...........2....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...........F....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...+...B........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x01, // @......H........
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, // ....`......*....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x01, // .......6...2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, // ...F.......8...r
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x02, // .......8........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, // ...........:....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, // ...........F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...6...........F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, // .......6...2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xc2, // ...F.......6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ...............6
	0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...2........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ..?............6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...2.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, // ...6............
	0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, // .......6...2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, // ...F............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, // ................
	0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, // . .............2
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, // ................
	0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, // . ..............
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, // ................
	0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, // . ..............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, // ................
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x05, // .......+........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, // ....@......H....
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ~.......`.......
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x05, // .......6........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, // ...F............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, // ................
	0x04, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x04, // .......+........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, // ....@......H....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ~.......`.......
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x04, // .......6...2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...F.......6...2
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x04, // ...r............
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x82, // ...F.......8....
	0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x06, // .......6........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, // ...F............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x36, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x03, // @.....@6........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, // ................
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, // ................
	0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, // . .............2
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, // ................
	0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, // . ..............
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, // ................
	0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, // . ..............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, // ................
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x05, // .......+........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, // ....@......H....
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ~.......`.......
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x05, // .......6........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, // ...F............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, // ................
	0x04, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x04, // .......+........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, // ....@......H....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ~.......`.......
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x04, // .......6...2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...F.......6...2
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x04, // ...r............
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x82, // ...F.......8....
	0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x07, // ...F.......F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x36, // ........@.....@6
	0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......2.......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F. ......
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, // ................
	0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // .......2.......F
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F. ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......2.......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, // .......F.......+
	0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...B........@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ...H...........F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // `......*.......6
	0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, // ...........F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, // .......2........
	0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, // .......F.......+
	0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...B........@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...H...........F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, // `......*.......6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...2.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x03, // .......8...r....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x05, // ...........F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, // ...8............
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, // .......:........
	0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...F.......6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, // ...........F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x03, // .......6........
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x32, // ...........6...2
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ..?........6...2
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x05, // ...........2....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xe6, 0x8a, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, // ...+............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x06, // @......H........
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...........F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x06, // ....`...........
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, // ...6...........F
	0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, // ...+............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x05, // @......H........
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...........F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, // ....`...........
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x05, // .......6...2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, // ...F.......8...r
	0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x02, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x07, // .......8........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x06, // ...........:....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, // ...6...........F
	0x0e, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x40, 0x36, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, // ..@6............
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x05, // ...........2....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xe6, 0x8a, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, // ...+............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x06, // @......H........
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...........F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x06, // ....`...........
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, // ...6...........F
	0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, // ...+............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x05, // @......H........
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...........F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, // ....`...........
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x05, // .......6...2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, // ...F.......8...r
	0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x02, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x08, // .......8........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x06, // ...........:....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x36, 0x00, 0x00, 0x05, 0x12, // ....@.....@6....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...2.......F....
	0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ...F. ..........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0xa6, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, // ...2.......F....
	0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ...F. ..........
	0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...2.......F....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x42, // ...F.......+...B
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ...F~.......`...
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...*.......6....
	0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, // ...2............
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x42, // ...F.......+...B
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...*.......6...2
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...2.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, // ...8...r........
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, // ...:............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x03, // .......6........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...F.......6....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // ...2.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, // ...6...2........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, // @.....?...?.....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x00, // .......6........
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...........6...2
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, // .......F........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, // ...2............
	0x00, 0x00, 0x00, 0xe6, 0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..... ..........
	0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, // ...........+....
	0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ...F~.......`...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...........6....
	0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, // ...........+....
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...........6...2
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x05, // ...2.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, // ...8...r........
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...:.......6....
	0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x36, 0x00, 0x00, 0x05, 0x12, // ....@.....@6....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, // ...2............
	0x00, 0x00, 0x00, 0xe6, 0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ..... ..........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x06, 0x84, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..... ..........
	0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, // ...........+....
	0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ...F~.......`...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, // ...........6....
	0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x12, // ...........+....
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // ........@......H
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...........6...2
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x05, // ...2.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, // ...8...r........
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, // ...:............
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x40, 0x36, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, // ..@6............
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, // ...........2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x8e, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x04, // ...........2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x00, // ...........2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, // ...F.......F....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, // ...+...B........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x06, // @......H........
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, // ....`......*....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, // ...6...........F
	0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x00, // ...........2....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, // ...........F....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...+...B........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x00, // @......H........
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ....`......*....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...6...2.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, // .......6...2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, // ...F.......8...r
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x02, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x04, // .......8........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x06, // ...........:....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x36, // .......F.......6
	0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...6...........F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, // ...F.......F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // .... ......F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, // ...F.......>....
	0x00, 0x10, 0x00,                                                                               // ...
};

static const uint8_t lm_fs_weighted_downsample_metal[7984] =
{
	0x46, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x21, 0x1f, 0x00, 0x00, 0x75, 0x73, // FSH.o.><..!...us
	0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, // ing namespace me
	0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // tal;.struct xlat
	0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x7b, // MtlShaderInput {
	0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // .  float4 gl_Fra
	0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, // gCoord [[positio
	0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, // n]];.};.struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, // latMtlShaderOutp
	0x75, 0x74, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x67, 0x6c, 0x5f, // ut {.  half4 gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, // FragColor;.};.st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, // ruct xlatMtlShad
	0x65, 0x72, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x66, 0x6c, // erUniform {.  fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // oat4 lm_textureS
	0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, // ize;.};.fragment
	0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, //  xlatMtlShaderOu
	0x74, 0x70, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // tput xlatMtlMain
	0x20, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x49, //  (xlatMtlShaderI
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x69, 0x20, 0x5b, 0x5b, 0x73, 0x74, // nput _mtl_i [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, // nt xlatMtlShader
	0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, // Uniform& _mtl_u
	0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x0a, 0x20, 0x20, // [[buffer(0)]].
	0x2c, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ,   texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // oat> lm_hemisphe
	0x72, 0x65, 0x73, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, // res [[texture(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // ]], sampler _mtl
	0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, // smp_lm_hemispher
	0x65, 0x73, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, // es [[sampler(0)]
	0x5d, 0x0a, 0x20, 0x20, 0x2c, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // ].  ,   texture2
	0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, // d<float> lm_weig
	0x68, 0x74, 0x73, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, // hts [[texture(1)
	0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // ]], sampler _mtl
	0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x5b, // smp_lm_weights [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(1)]]).{
	0x0a, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, // .  xlatMtlShader
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x6f, 0x3b, 0x0a, 0x20, // Output _mtl_o;.
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, //  float2 tmpvar_1
	0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, // ;.  tmpvar_1 = (
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x69, 0x2e, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // (_mtl_i.gl_FragC
	0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // oord.xy * float2
	0x28, 0x36, 0x2e, 0x30, 0x2c, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x66, 0x6c, // (6.0, 2.0)) + fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, // oat2(0.5, 0.5));
	0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // .  float2 tmpvar
	0x5f, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x3d, // _2;.  tmpvar_2 =
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x66, 0x6d, 0x6f, 0x64, 0x20, 0x28, 0x74, //  (float2(fmod (t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // mpvar_1, _mtl_u.
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, // lm_textureSize.z
	0x77, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x73, 0x75, // w)));.  half4 su
	0x6d, 0x5f, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, // m_3;.  float2 tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // pvar_4;.  tmpvar
	0x5f, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, // _4 = (float2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // , 0.0) / _mtl_u.
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, // lm_textureSize.x
	0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, // y);.  half4 tmpv
	0x61, 0x72, 0x5f, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, // ar_5;.  float2 P
	0x5f, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, // _6;.  P_6 = ((tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // pvar_1 / _mtl_u.
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, // lm_textureSize.x
	0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x29, 0x3b, 0x0a, // y) + tmpvar_4);.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, //   tmpvar_5 = hal
	0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // f4(lm_hemisphere
	0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, // s.sample(_mtlsmp
	0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, // _lm_hemispheres,
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x36, 0x29, 0x2c, 0x20, //  (float2)(P_6),
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // level(0.0)));.
	0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x3b, 0x0a, // half4 tmpvar_7;.
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x38, 0x3b, 0x0a, 0x20, 0x20, //   float2 P_8;.
	0x50, 0x5f, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, // P_8 = ((tmpvar_2
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, //  / _mtl_u.lm_tex
	0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, // tureSize.zw) + t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, // mpvar_4);.  tmpv
	0x61, 0x72, 0x5f, 0x37, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, // ar_7 = half4(lm_
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, // weights.sample(_
	0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, // mtlsmp_lm_weight
	0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x38, 0x29, // s, (float2)(P_8)
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, // , level(0.0)));.
	0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x39, //   half4 tmpvar_9
	0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x39, 0x2e, 0x78, 0x79, 0x7a, // ;.  tmpvar_9.xyz
	0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x2e, 0x78, 0x79, 0x7a, //  = (tmpvar_5.xyz
	0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x2e, 0x78, 0x29, 0x3b, 0x0a, //  * tmpvar_7.x);.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x39, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, //   tmpvar_9.w = (
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, // tmpvar_5.w * tmp
	0x76, 0x61, 0x72, 0x5f, 0x37, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // var_7.y);.  floa
	0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x3b, 0x0a, 0x20, 0x20, // t2 tmpvar_10;.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, // tmpvar_10 = (flo
	0x61, 0x74, 0x32, 0x28, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // at2(2.0, 0.0) /
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // _mtl_u.lm_textur
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, // eSize.xy);.  hal
	0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x31, 0x3b, 0x0a, 0x20, 0x20, // f4 tmpvar_11;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x31, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x50, // float2 P_12;.  P
	0x5f, 0x31, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // _12 = ((tmpvar_1
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, //  / _mtl_u.lm_tex
	0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, // tureSize.xy) + t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, // mpvar_10);.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x31, 0x31, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, // var_11 = half4(l
	0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, // m_hemispheres.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, // mple(_mtlsmp_lm_
	0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, // hemispheres, (fl
	0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x31, 0x32, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // oat2)(P_12), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, // el(0.0)));.  hal
	0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x33, 0x3b, 0x0a, 0x20, 0x20, // f4 tmpvar_13;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x31, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x50, // float2 P_14;.  P
	0x5f, 0x31, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, // _14 = ((tmpvar_2
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, //  / _mtl_u.lm_tex
	0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, // tureSize.zw) + t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, // mpvar_10);.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x31, 0x33, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, // var_13 = half4(l
	0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // m_weights.sample
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, // (_mtlsmp_lm_weig
	0x68, 0x74, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, // hts, (float2)(P_
	0x31, 0x34, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // 14), level(0.0))
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // );.  half4 tmpva
	0x72, 0x5f, 0x31, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // r_15;.  tmpvar_1
	0x35, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 5.xyz = (tmpvar_
	0x31, 0x31, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 11.xyz * tmpvar_
	0x31, 0x33, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 13.x);.  tmpvar_
	0x31, 0x35, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // 15.w = (tmpvar_1
	0x31, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x33, 0x2e, // 1.w * tmpvar_13.
	0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x74, // y);.  sum_3 = (t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x39, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // mpvar_9 + tmpvar
	0x5f, 0x31, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, // _15);.  float2 t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, // mpvar_16;.  tmpv
	0x61, 0x72, 0x5f, 0x31, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // ar_16 = (float2(
	0x34, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 4.0, 0.0) / _mtl
	0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, // _u.lm_textureSiz
	0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, // e.xy);.  half4 t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // mpvar_17;.  floa
	0x74, 0x32, 0x20, 0x50, 0x5f, 0x31, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x31, 0x38, 0x20, // t2 P_18;.  P_18
	0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x5f, // = ((tmpvar_1 / _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // mtl_u.lm_texture
	0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // Size.xy) + tmpva
	0x72, 0x5f, 0x31, 0x36, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // r_16);.  tmpvar_
	0x31, 0x37, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // 17 = half4(lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // mispheres.sample
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, // (_mtlsmp_lm_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // spheres, (float2
	0x29, 0x28, 0x50, 0x5f, 0x31, 0x38, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, // )(P_18), level(0
	0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, // .0)));.  half4 t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // mpvar_19;.  floa
	0x74, 0x32, 0x20, 0x50, 0x5f, 0x32, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x32, 0x30, 0x20, // t2 P_20;.  P_20
	0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x5f, // = ((tmpvar_2 / _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // mtl_u.lm_texture
	0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // Size.zw) + tmpva
	0x72, 0x5f, 0x31, 0x36, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // r_16);.  tmpvar_
	0x31, 0x39, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, // 19 = half4(lm_we
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, // ights.sample(_mt
	0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, // lsmp_lm_weights,
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x32, 0x30, 0x29, 0x2c, //  (float2)(P_20),
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, //  level(0.0)));.
	0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x31, //  half4 tmpvar_21
	0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x31, 0x2e, 0x78, 0x79, // ;.  tmpvar_21.xy
	0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x37, 0x2e, 0x78, // z = (tmpvar_17.x
	0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x39, 0x2e, 0x78, // yz * tmpvar_19.x
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x31, 0x2e, 0x77, // );.  tmpvar_21.w
	0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x37, 0x2e, 0x77, 0x20, //  = (tmpvar_17.w
	0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x39, 0x2e, 0x79, 0x29, 0x3b, 0x0a, // * tmpvar_19.y);.
	0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x33, //   sum_3 = (sum_3
	0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x31, 0x29, 0x3b, 0x0a, 0x20, //  + tmpvar_21);.
	0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x32, 0x32, 0x3b, 0x0a, 0x20, //  half4 sum_22;.
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, //  float2 tmpvar_2
	0x33, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x33, 0x20, 0x3d, // 3;.  tmpvar_23 =
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, //  (float2(1.0, 0.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, // 0) / _mtl_u.lm_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, // extureSize.xy);.
	0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, //   half4 tmpvar_2
	0x34, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x32, 0x35, // 4;.  float2 P_25
	0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x32, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, // ;.  P_25 = ((tmp
	0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, // var_1 / _mtl_u.l
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, // m_textureSize.xy
	0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x33, 0x29, 0x3b, 0x0a, // ) + tmpvar_23);.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x34, 0x20, 0x3d, 0x20, 0x68, 0x61, //   tmpvar_24 = ha
	0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, // lf4(lm_hemispher
	0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, // es.sample(_mtlsm
	0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, // p_lm_hemispheres
	0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x32, 0x35, 0x29, // , (float2)(P_25)
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, // , level(0.0)));.
	0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, //   half4 tmpvar_2
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x32, 0x37, // 6;.  float2 P_27
	0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x32, 0x37, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, // ;.  P_27 = ((tmp
	0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, // var_2 / _mtl_u.l
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, // m_textureSize.zw
	0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x33, 0x29, 0x3b, 0x0a, // ) + tmpvar_23);.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x36, 0x20, 0x3d, 0x20, 0x68, 0x61, //   tmpvar_26 = ha
	0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, // lf4(lm_weights.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, // ample(_mtlsmp_lm
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _weights, (float
	0x32, 0x29, 0x28, 0x50, 0x5f, 0x32, 0x37, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // 2)(P_27), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, // 0.0)));.  half4
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, // tmpvar_28;.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x32, 0x38, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, // var_28.xyz = (tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x34, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, // pvar_24.xyz * tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x36, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, // pvar_26.x);.  tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x38, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, // pvar_28.w = (tmp
	0x76, 0x61, 0x72, 0x5f, 0x32, 0x34, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // var_24.w * tmpva
	0x72, 0x5f, 0x32, 0x36, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r_26.y);.  float
	0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x74, // 2 tmpvar_29;.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x39, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // mpvar_29 = (floa
	0x74, 0x32, 0x28, 0x33, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, // t2(3.0, 0.0) / _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // mtl_u.lm_texture
	0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, // Size.xy);.  half
	0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x66, // 4 tmpvar_30;.  f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x33, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, // loat2 P_31;.  P_
	0x33, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, // 31 = ((tmpvar_1
	0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, // / _mtl_u.lm_text
	0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, // ureSize.xy) + tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, // pvar_29);.  tmpv
	0x61, 0x72, 0x5f, 0x33, 0x30, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, // ar_30 = half4(lm
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, // _hemispheres.sam
	0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, // ple(_mtlsmp_lm_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, // emispheres, (flo
	0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x33, 0x31, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // at2)(P_31), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, // l(0.0)));.  half
	0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x66, // 4 tmpvar_32;.  f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x33, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, // loat2 P_33;.  P_
	0x33, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, // 33 = ((tmpvar_2
	0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, // / _mtl_u.lm_text
	0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, // ureSize.zw) + tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, // pvar_29);.  tmpv
	0x61, 0x72, 0x5f, 0x33, 0x32, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, // ar_32 = half4(lm
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // _weights.sample(
	0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, // _mtlsmp_lm_weigh
	0x74, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x33, // ts, (float2)(P_3
	0x33, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, // 3), level(0.0)))
	0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ;.  half4 tmpvar
	0x5f, 0x33, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x34, // _34;.  tmpvar_34
	0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, // .xyz = (tmpvar_3
	0x30, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, // 0.xyz * tmpvar_3
	0x32, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, // 2.x);.  tmpvar_3
	0x34, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x30, // 4.w = (tmpvar_30
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x32, 0x2e, 0x79, // .w * tmpvar_32.y
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x74, // );.  sum_22 = (t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x38, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // mpvar_28 + tmpva
	0x72, 0x5f, 0x33, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, // r_34);.  float2
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, // tmpvar_35;.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x33, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // var_35 = (float2
	0x28, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, // (5.0, 0.0) / _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, // l_u.lm_textureSi
	0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, // ze.xy);.  half4
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, // tmpvar_36;.  flo
	0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x33, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x33, 0x37, // at2 P_37;.  P_37
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, //  = ((tmpvar_1 /
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // _mtl_u.lm_textur
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, // eSize.xy) + tmpv
	0x61, 0x72, 0x5f, 0x33, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ar_35);.  tmpvar
	0x5f, 0x33, 0x36, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, // _36 = half4(lm_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // emispheres.sampl
	0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, // e(_mtlsmp_lm_hem
	0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ispheres, (float
	0x32, 0x29, 0x28, 0x50, 0x5f, 0x33, 0x37, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // 2)(P_37), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, // 0.0)));.  half4
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, // tmpvar_38;.  flo
	0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x33, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x33, 0x39, // at2 P_39;.  P_39
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, //  = ((tmpvar_2 /
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // _mtl_u.lm_textur
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, // eSize.zw) + tmpv
	0x61, 0x72, 0x5f, 0x33, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ar_35);.  tmpvar
	0x5f, 0x33, 0x38, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x77, // _38 = half4(lm_w
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, // eights.sample(_m
	0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, // tlsmp_lm_weights
	0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x33, 0x39, 0x29, // , (float2)(P_39)
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, // , level(0.0)));.
	0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, //   half4 tmpvar_4
	0x30, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x30, 0x2e, 0x78, // 0;.  tmpvar_40.x
	0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x36, 0x2e, // yz = (tmpvar_36.
	0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x38, 0x2e, // xyz * tmpvar_38.
	0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x30, 0x2e, // x);.  tmpvar_40.
	0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x36, 0x2e, 0x77, // w = (tmpvar_36.w
	0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x38, 0x2e, 0x79, 0x29, 0x3b, //  * tmpvar_38.y);
	0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, // .  sum_22 = (sum
	0x5f, 0x32, 0x32, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x30, 0x29, // _22 + tmpvar_40)
	0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x34, 0x31, // ;.  half4 sum_41
	0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // ;.  float2 tmpva
	0x72, 0x5f, 0x34, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, // r_42;.  tmpvar_4
	0x32, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // 2 = (float2(0.0,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, //  1.0) / _mtl_u.l
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, // m_textureSize.xy
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // );.  half4 tmpva
	0x72, 0x5f, 0x34, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, // r_43;.  float2 P
	0x5f, 0x34, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x34, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x28, // _44;.  P_44 = ((
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // tmpvar_1 / _mtl_
	0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, // u.lm_textureSize
	0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x32, // .xy) + tmpvar_42
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x33, 0x20, 0x3d, // );.  tmpvar_43 =
	0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, //  half4(lm_hemisp
	0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, // heres.sample(_mt
	0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // lsmp_lm_hemisphe
	0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, // res, (float2)(P_
	0x34, 0x34, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // 44), level(0.0))
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // );.  half4 tmpva
	0x72, 0x5f, 0x34, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, // r_45;.  float2 P
	0x5f, 0x34, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x34, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x28, // _46;.  P_46 = ((
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // tmpvar_2 / _mtl_
	0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, // u.lm_textureSize
	0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x32, // .zw) + tmpvar_42
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x35, 0x20, 0x3d, // );.  tmpvar_45 =
	0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, //  half4(lm_weight
	0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, // s.sample(_mtlsmp
	0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, // _lm_weights, (fl
	0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x34, 0x36, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // oat2)(P_46), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, // el(0.0)));.  hal
	0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x37, 0x3b, 0x0a, 0x20, 0x20, // f4 tmpvar_47;.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x37, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, // tmpvar_47.xyz =
	0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x33, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, // (tmpvar_43.xyz *
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x35, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, //  tmpvar_45.x);.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x37, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, //  tmpvar_47.w = (
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x33, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, // tmpvar_43.w * tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x35, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, // pvar_45.y);.  fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x38, 0x3b, 0x0a, // oat2 tmpvar_48;.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x66, //   tmpvar_48 = (f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // loat2(2.0, 1.0)
	0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, // / _mtl_u.lm_text
	0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, // ureSize.xy);.  h
	0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x39, 0x3b, 0x0a, // alf4 tmpvar_49;.
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x35, 0x30, 0x3b, 0x0a, 0x20, //   float2 P_50;.
	0x20, 0x50, 0x5f, 0x35, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, //  P_50 = ((tmpvar
	0x5f, 0x31, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, // _1 / _mtl_u.lm_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, // extureSize.xy) +
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, //  tmpvar_48);.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x39, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, // mpvar_49 = half4
	0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, // (lm_hemispheres.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, // sample(_mtlsmp_l
	0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, // m_hemispheres, (
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x35, 0x30, 0x29, 0x2c, 0x20, 0x6c, // float2)(P_50), l
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, // evel(0.0)));.  h
	0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x31, 0x3b, 0x0a, // alf4 tmpvar_51;.
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x35, 0x32, 0x3b, 0x0a, 0x20, //   float2 P_52;.
	0x20, 0x50, 0x5f, 0x35, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, //  P_52 = ((tmpvar
	0x5f, 0x32, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, // _2 / _mtl_u.lm_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, // extureSize.zw) +
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, //  tmpvar_48);.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x31, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, // mpvar_51 = half4
	0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, // (lm_weights.samp
	0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, // le(_mtlsmp_lm_we
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, // ights, (float2)(
	0x50, 0x5f, 0x35, 0x32, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // P_52), level(0.0
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, // )));.  half4 tmp
	0x76, 0x61, 0x72, 0x5f, 0x35, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // var_53;.  tmpvar
	0x5f, 0x35, 0x33, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, // _53.xyz = (tmpva
	0x72, 0x5f, 0x34, 0x39, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // r_49.xyz * tmpva
	0x72, 0x5f, 0x35, 0x31, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // r_51.x);.  tmpva
	0x72, 0x5f, 0x35, 0x33, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // r_53.w = (tmpvar
	0x5f, 0x34, 0x39, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, // _49.w * tmpvar_5
	0x31, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x34, 0x31, 0x20, 0x3d, // 1.y);.  sum_41 =
	0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x37, 0x20, 0x2b, 0x20, 0x74, 0x6d, //  (tmpvar_47 + tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x33, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // pvar_53);.  floa
	0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x34, 0x3b, 0x0a, 0x20, 0x20, // t2 tmpvar_54;.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, // tmpvar_54 = (flo
	0x61, 0x74, 0x32, 0x28, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // at2(4.0, 1.0) /
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // _mtl_u.lm_textur
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, // eSize.xy);.  hal
	0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x35, 0x3b, 0x0a, 0x20, 0x20, // f4 tmpvar_55;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x35, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x50, // float2 P_56;.  P
	0x5f, 0x35, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // _56 = ((tmpvar_1
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, //  / _mtl_u.lm_tex
	0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, // tureSize.xy) + t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, // mpvar_54);.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x35, 0x35, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, // var_55 = half4(l
	0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, // m_hemispheres.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, // mple(_mtlsmp_lm_
	0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, // hemispheres, (fl
	0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x35, 0x36, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // oat2)(P_56), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, // el(0.0)));.  hal
	0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x37, 0x3b, 0x0a, 0x20, 0x20, // f4 tmpvar_57;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x35, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x50, // float2 P_58;.  P
	0x5f, 0x35, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, // _58 = ((tmpvar_2
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, //  / _mtl_u.lm_tex
	0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, // tureSize.zw) + t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, // mpvar_54);.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x35, 0x37, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, // var_57 = half4(l
	0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // m_weights.sample
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, // (_mtlsmp_lm_weig
	0x68, 0x74, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, // hts, (float2)(P_
	0x35, 0x38, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // 58), level(0.0))
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // );.  half4 tmpva
	0x72, 0x5f, 0x35, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, // r_59;.  tmpvar_5
	0x39, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 9.xyz = (tmpvar_
	0x35, 0x35, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 55.xyz * tmpvar_
	0x35, 0x37, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 57.x);.  tmpvar_
	0x35, 0x39, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, // 59.w = (tmpvar_5
	0x35, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x37, 0x2e, // 5.w * tmpvar_57.
	0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x34, 0x31, 0x20, 0x3d, 0x20, 0x28, // y);.  sum_41 = (
	0x73, 0x75, 0x6d, 0x5f, 0x34, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // sum_41 + tmpvar_
	0x35, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x73, 0x75, 0x6d, // 59);.  half4 sum
	0x5f, 0x36, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, // _60;.  float2 tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // pvar_61;.  tmpva
	0x72, 0x5f, 0x36, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x5f, 0x6d, 0x74, // r_61 = (1.0/(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, // l_u.lm_textureSi
	0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, // ze.xy));.  half4
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, //  tmpvar_62;.  fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x36, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x36, // oat2 P_63;.  P_6
	0x33, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, // 3 = ((tmpvar_1 /
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, //  _mtl_u.lm_textu
	0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, // reSize.xy) + tmp
	0x76, 0x61, 0x72, 0x5f, 0x36, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // var_61);.  tmpva
	0x72, 0x5f, 0x36, 0x32, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, // r_62 = half4(lm_
	0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, // hemispheres.samp
	0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // le(_mtlsmp_lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // mispheres, (floa
	0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x36, 0x33, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // t2)(P_63), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, // (0.0)));.  half4
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, //  tmpvar_64;.  fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x36, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x36, // oat2 P_65;.  P_6
	0x35, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, // 5 = ((tmpvar_2 /
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, //  _mtl_u.lm_textu
	0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, // reSize.zw) + tmp
	0x76, 0x61, 0x72, 0x5f, 0x36, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // var_61);.  tmpva
	0x72, 0x5f, 0x36, 0x34, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, // r_64 = half4(lm_
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, // weights.sample(_
	0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, // mtlsmp_lm_weight
	0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x36, 0x35, // s, (float2)(P_65
	0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, // ), level(0.0)));
	0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // .  half4 tmpvar_
	0x36, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x36, 0x2e, // 66;.  tmpvar_66.
	0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x32, // xyz = (tmpvar_62
	0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x34, // .xyz * tmpvar_64
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x36, // .x);.  tmpvar_66
	0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x32, 0x2e, // .w = (tmpvar_62.
	0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x34, 0x2e, 0x79, 0x29, // w * tmpvar_64.y)
	0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // ;.  float2 tmpva
	0x72, 0x5f, 0x36, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, // r_67;.  tmpvar_6
	0x37, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x33, 0x2e, 0x30, 0x2c, // 7 = (float2(3.0,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, //  1.0) / _mtl_u.l
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, // m_textureSize.xy
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // );.  half4 tmpva
	0x72, 0x5f, 0x36, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, // r_68;.  float2 P
	0x5f, 0x36, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x36, 0x39, 0x20, 0x3d, 0x20, 0x28, 0x28, // _69;.  P_69 = ((
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // tmpvar_1 / _mtl_
	0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, // u.lm_textureSize
	0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x37, // .xy) + tmpvar_67
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x38, 0x20, 0x3d, // );.  tmpvar_68 =
	0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, //  half4(lm_hemisp
	0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, // heres.sample(_mt
	0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // lsmp_lm_hemisphe
	0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, // res, (float2)(P_
	0x36, 0x39, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // 69), level(0.0))
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // );.  half4 tmpva
	0x72, 0x5f, 0x37, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, // r_70;.  float2 P
	0x5f, 0x37, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x37, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x28, // _71;.  P_71 = ((
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // tmpvar_2 / _mtl_
	0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, // u.lm_textureSize
	0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x37, // .zw) + tmpvar_67
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x30, 0x20, 0x3d, // );.  tmpvar_70 =
	0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, //  half4(lm_weight
	0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, // s.sample(_mtlsmp
	0x5f, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, // _lm_weights, (fl
	0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x37, 0x31, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // oat2)(P_71), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, // el(0.0)));.  hal
	0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x32, 0x3b, 0x0a, 0x20, 0x20, // f4 tmpvar_72;.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x32, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, // tmpvar_72.xyz =
	0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x38, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, // (tmpvar_68.xyz *
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x30, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, //  tmpvar_70.x);.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x32, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, //  tmpvar_72.w = (
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x38, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, // tmpvar_68.w * tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x30, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, // pvar_70.y);.  su
	0x6d, 0x5f, 0x36, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, // m_60 = (tmpvar_6
	0x36, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x32, 0x29, 0x3b, 0x0a, // 6 + tmpvar_72);.
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, //   float2 tmpvar_
	0x37, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x33, 0x20, // 73;.  tmpvar_73
	0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x31, // = (float2(5.0, 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, // .0) / _mtl_u.lm_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, // textureSize.xy);
	0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // .  half4 tmpvar_
	0x37, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x37, // 74;.  float2 P_7
	0x35, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, // 5;.  P_75 = ((tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // pvar_1 / _mtl_u.
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, // lm_textureSize.x
	0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x33, 0x29, 0x3b, // y) + tmpvar_73);
	0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x68, // .  tmpvar_74 = h
	0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // alf4(lm_hemisphe
	0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, // res.sample(_mtls
	0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // mp_lm_hemisphere
	0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x37, 0x35, // s, (float2)(P_75
	0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, // ), level(0.0)));
	0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // .  half4 tmpvar_
	0x37, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x37, // 76;.  float2 P_7
	0x37, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x37, 0x37, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, // 7;.  P_77 = ((tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // pvar_2 / _mtl_u.
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, // lm_textureSize.z
	0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x33, 0x29, 0x3b, // w) + tmpvar_73);
	0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x36, 0x20, 0x3d, 0x20, 0x68, // .  tmpvar_76 = h
	0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, // alf4(lm_weights.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, // sample(_mtlsmp_l
	0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // m_weights, (floa
	0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x37, 0x37, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // t2)(P_77), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, // (0.0)));.  half4
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, //  tmpvar_78;.  tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x38, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, // pvar_78.xyz = (t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x34, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, // mpvar_74.xyz * t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x36, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, // mpvar_76.x);.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x38, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, // mpvar_78.w = (tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x34, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, // pvar_74.w * tmpv
	0x61, 0x72, 0x5f, 0x37, 0x36, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, // ar_76.y);.  sum_
	0x36, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x36, 0x30, 0x20, 0x2b, 0x20, 0x74, // 60 = (sum_60 + t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x5f, 0x6d, 0x74, // mpvar_78);.  _mt
	0x6c, 0x5f, 0x6f, 0x2e, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // l_o.gl_FragColor
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x33, 0x20, 0x2b, 0x20, 0x73, 0x75, 0x6d, //  = ((sum_3 + sum
	0x5f, 0x32, 0x32, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x34, 0x31, 0x20, 0x2b, // _22) + (sum_41 +
	0x20, 0x73, 0x75, 0x6d, 0x5f, 0x36, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, //  sum_60));.  ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x6f, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, // urn _mtl_o;.}...
};

static const uint8_t lm_fs_weighted_downsample_glsl[6749] =
{
	0x46, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x03, 0x00, 0x0e, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // FSH.o.><...lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0a, // mispheres.......
	0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, // lm_weights......
	0x0e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x02, // .lm_textureSize.
	0x01, 0x00, 0x00, 0x01, 0x00, 0x13, 0x1a, 0x00, 0x00, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // .........uniform
	0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x6c, 0x6d, 0x5f, 0x68, 0x65, //  sampler2D lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // mispheres;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x6c, 0x6d, 0x5f, // rm sampler2D lm_
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // weights;.uniform
	0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6c, 0x6d, 0x5f, 0x74, //  highp vec4 lm_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, // extureSize;.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, //  main ().{.  hig
	0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // hp vec2 tmpvar_1
	0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x28, // ;.  tmpvar_1 = (
	0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, // (gl_FragCoord.xy
	0x20, 0x2a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x36, 0x2e, 0x30, 0x2c, 0x20, 0x32, 0x2e, 0x30, //  * vec2(6.0, 2.0
	0x29, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, // )) + vec2(0.5, 0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, // .5));.  highp ve
	0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x74, // c2 tmpvar_2;.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, // mpvar_2 = (vec2(
	0x6d, 0x6f, 0x64, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x2c, 0x20, 0x6c, // mod (tmpvar_1, l
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, // m_textureSize.zw
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, // )));.  lowp vec4
	0x20, 0x73, 0x75, 0x6d, 0x5f, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, //  sum_3;.  highp
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x3b, 0x0a, 0x20, // vec2 tmpvar_4;.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, //  tmpvar_4 = (vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x6c, 0x6d, // 2(0.0, 0.0) / lm
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, // _textureSize.xy)
	0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, // ;.  lowp vec4 tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, // pvar_5;.  highp
	0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x36, 0x20, // vec2 P_6;.  P_6
	0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x6c, // = ((tmpvar_1 / l
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, // m_textureSize.xy
	0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x29, 0x3b, 0x0a, 0x20, // ) + tmpvar_4);.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, //  tmpvar_5 = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, // ure2DLod    (lm_
	0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x36, // hemispheres, P_6
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, // , 0.0);.  lowp v
	0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x3b, 0x0a, 0x20, 0x20, // ec4 tmpvar_7;.
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x38, 0x3b, 0x0a, // highp vec2 P_8;.
	0x20, 0x20, 0x50, 0x5f, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, //   P_8 = ((tmpvar
	0x5f, 0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // _2 / lm_textureS
	0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ize.zw) + tmpvar
	0x5f, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x20, // _4);.  tmpvar_7
	0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, // = texture2DLod
	0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x50, //   (lm_weights, P
	0x5f, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, // _8, 0.0);.  lowp
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x39, 0x3b, 0x0a, //  vec4 tmpvar_9;.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x39, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, //   tmpvar_9.xyz =
	0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, //  (tmpvar_5.xyz *
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, //  tmpvar_7.x);.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x39, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, // tmpvar_9.w = (tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // pvar_5.w * tmpva
	0x72, 0x5f, 0x37, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, // r_7.y);.  highp
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x3b, 0x0a, // vec2 tmpvar_10;.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x76, //   tmpvar_10 = (v
	0x65, 0x63, 0x32, 0x28, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // ec2(2.0, 0.0) /
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, // lm_textureSize.x
	0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // y);.  lowp vec4
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, // tmpvar_11;.  hig
	0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x31, 0x32, 0x3b, 0x0a, 0x20, 0x20, // hp vec2 P_12;.
	0x50, 0x5f, 0x31, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // P_12 = ((tmpvar_
	0x31, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, // 1 / lm_textureSi
	0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // ze.xy) + tmpvar_
	0x31, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x31, // 10);.  tmpvar_11
	0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, //  = texture2DLod
	0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, //    (lm_hemispher
	0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x31, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // es, P_12, 0.0);.
	0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, //   lowp vec4 tmpv
	0x61, 0x72, 0x5f, 0x31, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, // ar_13;.  highp v
	0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x31, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x31, 0x34, // ec2 P_14;.  P_14
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, //  = ((tmpvar_2 /
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, // lm_textureSize.z
	0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x29, 0x3b, // w) + tmpvar_10);
	0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x33, 0x20, 0x3d, 0x20, 0x74, // .  tmpvar_13 = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, // exture2DLod    (
	0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x31, 0x34, // lm_weights, P_14
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, // , 0.0);.  lowp v
	0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x35, 0x3b, 0x0a, 0x20, // ec4 tmpvar_15;.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x35, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, //  tmpvar_15.xyz =
	0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x31, 0x2e, 0x78, 0x79, 0x7a, 0x20, //  (tmpvar_11.xyz
	0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x33, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // * tmpvar_13.x);.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x35, 0x2e, 0x77, 0x20, 0x3d, 0x20, //   tmpvar_15.w =
	0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x31, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, // (tmpvar_11.w * t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x33, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, // mpvar_13.y);.  s
	0x75, 0x6d, 0x5f, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x39, // um_3 = (tmpvar_9
	0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x35, 0x29, 0x3b, 0x0a, 0x20, //  + tmpvar_15);.
	0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, //  highp vec2 tmpv
	0x61, 0x72, 0x5f, 0x31, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // ar_16;.  tmpvar_
	0x31, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x34, 0x2e, 0x30, 0x2c, 0x20, // 16 = (vec2(4.0,
	0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // 0.0) / lm_textur
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, // eSize.xy);.  low
	0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x37, // p vec4 tmpvar_17
	0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, // ;.  highp vec2 P
	0x5f, 0x31, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x31, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x28, // _18;.  P_18 = ((
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, // tmpvar_1 / lm_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, // xtureSize.xy) +
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x36, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, // tmpvar_16);.  tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x37, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // pvar_17 = textur
	0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // e2DLod    (lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x31, 0x38, 0x2c, // mispheres, P_18,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, //  0.0);.  lowp ve
	0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x39, 0x3b, 0x0a, 0x20, 0x20, // c4 tmpvar_19;.
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x32, 0x30, 0x3b, // highp vec2 P_20;
	0x0a, 0x20, 0x20, 0x50, 0x5f, 0x32, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, // .  P_20 = ((tmpv
	0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ar_2 / lm_textur
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, // eSize.zw) + tmpv
	0x61, 0x72, 0x5f, 0x31, 0x36, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ar_16);.  tmpvar
	0x5f, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, // _19 = texture2DL
	0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, // od    (lm_weight
	0x73, 0x2c, 0x20, 0x50, 0x5f, 0x32, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // s, P_20, 0.0);.
	0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, //  lowp vec4 tmpva
	0x72, 0x5f, 0x32, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, // r_21;.  tmpvar_2
	0x31, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 1.xyz = (tmpvar_
	0x31, 0x37, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 17.xyz * tmpvar_
	0x31, 0x39, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 19.x);.  tmpvar_
	0x32, 0x31, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // 21.w = (tmpvar_1
	0x37, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x39, 0x2e, // 7.w * tmpvar_19.
	0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x73, // y);.  sum_3 = (s
	0x75, 0x6d, 0x5f, 0x33, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x31, // um_3 + tmpvar_21
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x73, // );.  lowp vec4 s
	0x75, 0x6d, 0x5f, 0x32, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, // um_22;.  highp v
	0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x33, 0x3b, 0x0a, 0x20, // ec2 tmpvar_23;.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, //  tmpvar_23 = (ve
	0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x6c, // c2(1.0, 0.0) / l
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, // m_textureSize.xy
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, // );.  lowp vec4 t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, // mpvar_24;.  high
	0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x50, // p vec2 P_25;.  P
	0x5f, 0x32, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // _25 = ((tmpvar_1
	0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, //  / lm_textureSiz
	0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, // e.xy) + tmpvar_2
	0x33, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x34, 0x20, // 3);.  tmpvar_24
	0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, // = texture2DLod
	0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, //   (lm_hemisphere
	0x73, 0x2c, 0x20, 0x50, 0x5f, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // s, P_25, 0.0);.
	0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, //  lowp vec4 tmpva
	0x72, 0x5f, 0x32, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, // r_26;.  highp ve
	0x63, 0x32, 0x20, 0x50, 0x5f, 0x32, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x32, 0x37, 0x20, // c2 P_27;.  P_27
	0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x6c, // = ((tmpvar_2 / l
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, // m_textureSize.zw
	0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x33, 0x29, 0x3b, 0x0a, // ) + tmpvar_23);.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x36, 0x20, 0x3d, 0x20, 0x74, 0x65, //   tmpvar_26 = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, // xture2DLod    (l
	0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x32, 0x37, 0x2c, // m_weights, P_27,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, //  0.0);.  lowp ve
	0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x38, 0x3b, 0x0a, 0x20, 0x20, // c4 tmpvar_28;.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x38, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, // tmpvar_28.xyz =
	0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x34, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, // (tmpvar_24.xyz *
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x36, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, //  tmpvar_26.x);.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x38, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, //  tmpvar_28.w = (
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x34, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, // tmpvar_24.w * tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x36, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, // pvar_26.y);.  hi
	0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // ghp vec2 tmpvar_
	0x32, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x39, 0x20, // 29;.  tmpvar_29
	0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x33, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, // = (vec2(3.0, 0.0
	0x29, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, // ) / lm_textureSi
	0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, // ze.xy);.  lowp v
	0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x30, 0x3b, 0x0a, 0x20, // ec4 tmpvar_30;.
	0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x33, 0x31, //  highp vec2 P_31
	0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x33, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, // ;.  P_31 = ((tmp
	0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // var_1 / lm_textu
	0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, // reSize.xy) + tmp
	0x76, 0x61, 0x72, 0x5f, 0x32, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // var_29);.  tmpva
	0x72, 0x5f, 0x33, 0x30, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // r_30 = texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, // Lod    (lm_hemis
	0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x33, 0x31, 0x2c, 0x20, 0x30, 0x2e, // pheres, P_31, 0.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // 0);.  lowp vec4
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, // tmpvar_32;.  hig
	0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x33, 0x33, 0x3b, 0x0a, 0x20, 0x20, // hp vec2 P_33;.
	0x50, 0x5f, 0x33, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // P_33 = ((tmpvar_
	0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, // 2 / lm_textureSi
	0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // ze.zw) + tmpvar_
	0x32, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x32, // 29);.  tmpvar_32
	0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, //  = texture2DLod
	0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, //    (lm_weights,
	0x50, 0x5f, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, // P_33, 0.0);.  lo
	0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, // wp vec4 tmpvar_3
	0x34, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x34, 0x2e, 0x78, // 4;.  tmpvar_34.x
	0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x30, 0x2e, // yz = (tmpvar_30.
	0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x32, 0x2e, // xyz * tmpvar_32.
	0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x34, 0x2e, // x);.  tmpvar_34.
	0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x30, 0x2e, 0x77, // w = (tmpvar_30.w
	0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x32, 0x2e, 0x79, 0x29, 0x3b, //  * tmpvar_32.y);
	0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, // .  sum_22 = (tmp
	0x76, 0x61, 0x72, 0x5f, 0x32, 0x38, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // var_28 + tmpvar_
	0x33, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, // 34);.  highp vec
	0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x74, // 2 tmpvar_35;.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, 0x32, // mpvar_35 = (vec2
	0x28, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, // (5.0, 0.0) / lm_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, // textureSize.xy);
	0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, // .  lowp vec4 tmp
	0x76, 0x61, 0x72, 0x5f, 0x33, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, // var_36;.  highp
	0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x33, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x33, // vec2 P_37;.  P_3
	0x37, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, // 7 = ((tmpvar_1 /
	0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, //  lm_textureSize.
	0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x35, 0x29, // xy) + tmpvar_35)
	0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x36, 0x20, 0x3d, 0x20, // ;.  tmpvar_36 =
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod
	0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, // (lm_hemispheres,
	0x20, 0x50, 0x5f, 0x33, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, //  P_37, 0.0);.  l
	0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // owp vec4 tmpvar_
	0x33, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, // 38;.  highp vec2
	0x20, 0x50, 0x5f, 0x33, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x33, 0x39, 0x20, 0x3d, 0x20, //  P_39;.  P_39 =
	0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, // ((tmpvar_2 / lm_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, // textureSize.zw)
	0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, // + tmpvar_35);.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x38, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // tmpvar_38 = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, // ure2DLod    (lm_
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x33, 0x39, 0x2c, 0x20, 0x30, // weights, P_39, 0
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, // .0);.  lowp vec4
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, //  tmpvar_40;.  tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x30, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, // pvar_40.xyz = (t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x36, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, // mpvar_36.xyz * t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x38, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, // mpvar_38.x);.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x30, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, // mpvar_40.w = (tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x36, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, // pvar_36.w * tmpv
	0x61, 0x72, 0x5f, 0x33, 0x38, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, // ar_38.y);.  sum_
	0x32, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x32, 0x32, 0x20, 0x2b, 0x20, 0x74, // 22 = (sum_22 + t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, // mpvar_40);.  low
	0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x34, 0x31, 0x3b, 0x0a, 0x20, // p vec4 sum_41;.
	0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, //  highp vec2 tmpv
	0x61, 0x72, 0x5f, 0x34, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // ar_42;.  tmpvar_
	0x34, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // 42 = (vec2(0.0,
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // 1.0) / lm_textur
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, // eSize.xy);.  low
	0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x33, // p vec4 tmpvar_43
	0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, // ;.  highp vec2 P
	0x5f, 0x34, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x34, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x28, // _44;.  P_44 = ((
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, // tmpvar_1 / lm_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, // xtureSize.xy) +
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, // tmpvar_42);.  tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x33, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // pvar_43 = textur
	0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // e2DLod    (lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x34, 0x34, 0x2c, // mispheres, P_44,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, //  0.0);.  lowp ve
	0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x35, 0x3b, 0x0a, 0x20, 0x20, // c4 tmpvar_45;.
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x34, 0x36, 0x3b, // highp vec2 P_46;
	0x0a, 0x20, 0x20, 0x50, 0x5f, 0x34, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, // .  P_46 = ((tmpv
	0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ar_2 / lm_textur
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, // eSize.zw) + tmpv
	0x61, 0x72, 0x5f, 0x34, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ar_42);.  tmpvar
	0x5f, 0x34, 0x35, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, // _45 = texture2DL
	0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, // od    (lm_weight
	0x73, 0x2c, 0x20, 0x50, 0x5f, 0x34, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // s, P_46, 0.0);.
	0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, //  lowp vec4 tmpva
	0x72, 0x5f, 0x34, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, // r_47;.  tmpvar_4
	0x37, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 7.xyz = (tmpvar_
	0x34, 0x33, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 43.xyz * tmpvar_
	0x34, 0x35, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // 45.x);.  tmpvar_
	0x34, 0x37, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, // 47.w = (tmpvar_4
	0x33, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x35, 0x2e, // 3.w * tmpvar_45.
	0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, // y);.  highp vec2
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, //  tmpvar_48;.  tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, // pvar_48 = (vec2(
	0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, // 2.0, 1.0) / lm_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, // extureSize.xy);.
	0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, //   lowp vec4 tmpv
	0x61, 0x72, 0x5f, 0x34, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, // ar_49;.  highp v
	0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x35, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x35, 0x30, // ec2 P_50;.  P_50
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, //  = ((tmpvar_1 /
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, // lm_textureSize.x
	0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x38, 0x29, 0x3b, // y) + tmpvar_48);
	0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x39, 0x20, 0x3d, 0x20, 0x74, // .  tmpvar_49 = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, // exture2DLod    (
	0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, // lm_hemispheres,
	0x50, 0x5f, 0x35, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, // P_50, 0.0);.  lo
	0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, // wp vec4 tmpvar_5
	0x31, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // 1;.  highp vec2
	0x50, 0x5f, 0x35, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x35, 0x32, 0x20, 0x3d, 0x20, 0x28, // P_52;.  P_52 = (
	0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, // (tmpvar_2 / lm_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, // extureSize.zw) +
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, //  tmpvar_48);.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // mpvar_51 = textu
	0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, // re2DLod    (lm_w
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x35, 0x32, 0x2c, 0x20, 0x30, 0x2e, // eights, P_52, 0.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // 0);.  lowp vec4
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, // tmpvar_53;.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x35, 0x33, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, // var_53.xyz = (tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x39, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, // pvar_49.xyz * tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x31, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, // pvar_51.x);.  tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x33, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, // pvar_53.w = (tmp
	0x76, 0x61, 0x72, 0x5f, 0x34, 0x39, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // var_49.w * tmpva
	0x72, 0x5f, 0x35, 0x31, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x34, // r_51.y);.  sum_4
	0x31, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x37, 0x20, 0x2b, // 1 = (tmpvar_47 +
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x33, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, //  tmpvar_53);.  h
	0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ighp vec2 tmpvar
	0x5f, 0x35, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x34, // _54;.  tmpvar_54
	0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x34, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, //  = (vec2(4.0, 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // 0) / lm_textureS
	0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, // ize.xy);.  lowp
	0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x35, 0x3b, 0x0a, // vec4 tmpvar_55;.
	0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x35, //   highp vec2 P_5
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x35, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, // 6;.  P_56 = ((tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, // pvar_1 / lm_text
	0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, // ureSize.xy) + tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, // pvar_54);.  tmpv
	0x61, 0x72, 0x5f, 0x35, 0x35, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // ar_55 = texture2
	0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, // DLod    (lm_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x35, 0x36, 0x2c, 0x20, 0x30, // spheres, P_56, 0
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, // .0);.  lowp vec4
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, //  tmpvar_57;.  hi
	0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x35, 0x38, 0x3b, 0x0a, 0x20, // ghp vec2 P_58;.
	0x20, 0x50, 0x5f, 0x35, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, //  P_58 = ((tmpvar
	0x5f, 0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // _2 / lm_textureS
	0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ize.zw) + tmpvar
	0x5f, 0x35, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, // _54);.  tmpvar_5
	0x37, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, // 7 = texture2DLod
	0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, //     (lm_weights,
	0x20, 0x50, 0x5f, 0x35, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, //  P_58, 0.0);.  l
	0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // owp vec4 tmpvar_
	0x35, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x39, 0x2e, // 59;.  tmpvar_59.
	0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x35, // xyz = (tmpvar_55
	0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x37, // .xyz * tmpvar_57
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x39, // .x);.  tmpvar_59
	0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x35, 0x2e, // .w = (tmpvar_55.
	0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x37, 0x2e, 0x79, 0x29, // w * tmpvar_57.y)
	0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x34, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, // ;.  sum_41 = (su
	0x6d, 0x5f, 0x34, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x39, // m_41 + tmpvar_59
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x73, // );.  lowp vec4 s
	0x75, 0x6d, 0x5f, 0x36, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, // um_60;.  highp v
	0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x31, 0x3b, 0x0a, 0x20, // ec2 tmpvar_61;.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, //  tmpvar_61 = (1.
	0x30, 0x2f, 0x28, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, // 0/(lm_textureSiz
	0x65, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, // e.xy));.  lowp v
	0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x32, 0x3b, 0x0a, 0x20, // ec4 tmpvar_62;.
	0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x36, 0x33, //  highp vec2 P_63
	0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x36, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, // ;.  P_63 = ((tmp
	0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // var_1 / lm_textu
	0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, // reSize.xy) + tmp
	0x76, 0x61, 0x72, 0x5f, 0x36, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // var_61);.  tmpva
	0x72, 0x5f, 0x36, 0x32, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // r_62 = texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, // Lod    (lm_hemis
	0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x36, 0x33, 0x2c, 0x20, 0x30, 0x2e, // pheres, P_63, 0.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // 0);.  lowp vec4
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, // tmpvar_64;.  hig
	0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x36, 0x35, 0x3b, 0x0a, 0x20, 0x20, // hp vec2 P_65;.
	0x50, 0x5f, 0x36, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // P_65 = ((tmpvar_
	0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, // 2 / lm_textureSi
	0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // ze.zw) + tmpvar_
	0x36, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x34, // 61);.  tmpvar_64
	0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, //  = texture2DLod
	0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, //    (lm_weights,
	0x50, 0x5f, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, // P_65, 0.0);.  lo
	0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, // wp vec4 tmpvar_6
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x36, 0x2e, 0x78, // 6;.  tmpvar_66.x
	0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x32, 0x2e, // yz = (tmpvar_62.
	0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x34, 0x2e, // xyz * tmpvar_64.
	0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x36, 0x2e, // x);.  tmpvar_66.
	0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x32, 0x2e, 0x77, // w = (tmpvar_62.w
	0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x34, 0x2e, 0x79, 0x29, 0x3b, //  * tmpvar_64.y);
	0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, // .  highp vec2 tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // pvar_67;.  tmpva
	0x72, 0x5f, 0x36, 0x37, 0x20, 0x3d, 0x20, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x33, 0x2e, 0x30, // r_67 = (vec2(3.0
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, // , 1.0) / lm_text
	0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, // ureSize.xy);.  l
	0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // owp vec4 tmpvar_
	0x36, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, // 68;.  highp vec2
	0x20, 0x50, 0x5f, 0x36, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x36, 0x39, 0x20, 0x3d, 0x20, //  P_69;.  P_69 =
	0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, // ((tmpvar_1 / lm_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, // textureSize.xy)
	0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x37, 0x29, 0x3b, 0x0a, 0x20, 0x20, // + tmpvar_67);.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x38, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // tmpvar_68 = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, // ure2DLod    (lm_
	0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x36, // hemispheres, P_6
	0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, // 9, 0.0);.  lowp
	0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x30, 0x3b, 0x0a, // vec4 tmpvar_70;.
	0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x37, //   highp vec2 P_7
	0x31, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x37, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, // 1;.  P_71 = ((tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, // pvar_2 / lm_text
	0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, // ureSize.zw) + tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x37, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, // pvar_67);.  tmpv
	0x61, 0x72, 0x5f, 0x37, 0x30, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // ar_70 = texture2
	0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, // DLod    (lm_weig
	0x68, 0x74, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x37, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, // hts, P_71, 0.0);
	0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, // .  lowp vec4 tmp
	0x76, 0x61, 0x72, 0x5f, 0x37, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // var_72;.  tmpvar
	0x5f, 0x37, 0x32, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, // _72.xyz = (tmpva
	0x72, 0x5f, 0x36, 0x38, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // r_68.xyz * tmpva
	0x72, 0x5f, 0x37, 0x30, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // r_70.x);.  tmpva
	0x72, 0x5f, 0x37, 0x32, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // r_72.w = (tmpvar
	0x5f, 0x36, 0x38, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, // _68.w * tmpvar_7
	0x30, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x36, 0x30, 0x20, 0x3d, // 0.y);.  sum_60 =
	0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x36, 0x36, 0x20, 0x2b, 0x20, 0x74, 0x6d, //  (tmpvar_66 + tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, // pvar_72);.  high
	0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x33, // p vec2 tmpvar_73
	0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x33, 0x20, 0x3d, 0x20, // ;.  tmpvar_73 =
	0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // (vec2(5.0, 1.0)
	0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, // / lm_textureSize
	0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, // .xy);.  lowp vec
	0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x68, // 4 tmpvar_74;.  h
	0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x37, 0x35, 0x3b, 0x0a, // ighp vec2 P_75;.
	0x20, 0x20, 0x50, 0x5f, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, //   P_75 = ((tmpva
	0x72, 0x5f, 0x31, 0x20, 0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // r_1 / lm_texture
	0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // Size.xy) + tmpva
	0x72, 0x5f, 0x37, 0x33, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // r_73);.  tmpvar_
	0x37, 0x34, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // 74 = texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // d    (lm_hemisph
	0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // eres, P_75, 0.0)
	0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, // ;.  lowp vec4 tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // pvar_76;.  highp
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x37, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, //  vec2 P_77;.  P_
	0x37, 0x37, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, // 77 = ((tmpvar_2
	0x2f, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, // / lm_textureSize
	0x2e, 0x7a, 0x77, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x33, // .zw) + tmpvar_73
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x36, 0x20, 0x3d, // );.  tmpvar_76 =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, //  texture2DLod
	0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20, 0x50, 0x5f, //  (lm_weights, P_
	0x37, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, // 77, 0.0);.  lowp
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x38, 0x3b, //  vec4 tmpvar_78;
	0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x38, 0x2e, 0x78, 0x79, 0x7a, // .  tmpvar_78.xyz
	0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x34, 0x2e, 0x78, 0x79, //  = (tmpvar_74.xy
	0x7a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x36, 0x2e, 0x78, 0x29, // z * tmpvar_76.x)
	0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x38, 0x2e, 0x77, 0x20, // ;.  tmpvar_78.w
	0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x34, 0x2e, 0x77, 0x20, 0x2a, // = (tmpvar_74.w *
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x36, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, //  tmpvar_76.y);.
	0x20, 0x73, 0x75, 0x6d, 0x5f, 0x36, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x36, //  sum_60 = (sum_6
	0x30, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x38, 0x29, 0x3b, 0x0a, // 0 + tmpvar_78);.
	0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, //   gl_FragColor =
	0x20, 0x28, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x33, 0x20, 0x2b, 0x20, 0x73, 0x75, 0x6d, 0x5f, 0x32, //  ((sum_3 + sum_2
	0x32, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x5f, 0x34, 0x31, 0x20, 0x2b, 0x20, 0x73, // 2) + (sum_41 + s
	0x75, 0x6d, 0x5f, 0x36, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,                   // um_60));.}...
};

// downsample vertex shader

/*
$input a_position, a_texcoord0
$output v_texcoord0

#include "../common/common.sh"

void main()
{
	gl_Position = mul(u_modelViewProj, vec4(a_position, 1.0));
	v_texcoord0 = a_texcoord0;
}
*/

static const uint8_t lm_vs_downsample_dx9[423] =
{
	0x56, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x01, 0x00, 0x0f, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // VSH.o.><...u_mod
	0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, 0x01, 0x00, 0x00, 0x04, 0x00, // elViewProj......
	0x84, 0x01, 0x00, 0x03, 0xfe, 0xff, 0xfe, 0xff, 0x24, 0x00, 0x43, 0x54, 0x41, 0x42, 0x1c, 0x00, // ........$.CTAB..
	0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0xff, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, // ..W.............
	0x00, 0x00, 0x04, 0x11, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, // ......P...0.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x5f, // ......@.......u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x00, 0x03, 0x00, // modelViewProj...
	0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x73, // ..............vs
	0x5f, 0x33, 0x5f, 0x30, 0x00, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, // _3_0.Microsoft (
	0x52, 0x29, 0x20, 0x48, 0x4c, 0x53, 0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, // R) HLSL Shader C
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x30, 0x30, // ompiler 10.0.100
	0x31, 0x31, 0x2e, 0x31, 0x36, 0x33, 0x38, 0x34, 0x00, 0xab, 0x51, 0x00, 0x00, 0x05, 0x04, 0x00, // 11.16384..Q.....
	0x0f, 0xa0, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....?..........
	0x00, 0x00, 0x1f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x0f, 0x90, 0x1f, 0x00, // ................
	0x00, 0x02, 0x05, 0x00, 0x00, 0x80, 0x01, 0x00, 0x0f, 0x90, 0x1f, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x80, 0x00, 0x00, 0x0f, 0xe0, 0x1f, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x80, 0x01, 0x00, // ................
	0x03, 0xe0, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0xa0, 0x00, 0x00, // ................
	0x00, 0x90, 0x05, 0x00, 0x00, 0x03, 0x01, 0x00, 0x0f, 0x80, 0x01, 0x00, 0xe4, 0xa0, 0x00, 0x00, // ................
	0x55, 0x90, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, // U...............
	0xe4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x01, 0x00, 0x0f, 0x80, 0x02, 0x00, 0xe4, 0xa0, 0x00, 0x00, // ................
	0xaa, 0x90, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, // ................
	0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x0f, 0x80, 0x03, 0x00, 0xe4, 0xa0, 0x05, 0x00, // ................
	0x00, 0x03, 0x01, 0x00, 0x0f, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x04, 0x00, 0x00, 0xa0, 0x02, 0x00, // ................
	0x00, 0x03, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x01, 0x00, // ................
	0x00, 0x02, 0x01, 0x00, 0x03, 0x80, 0x01, 0x00, 0xe4, 0x90, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x0f, 0xe0, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x03, 0xe0, 0x01, 0x00, // ................
	0xe4, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00,                                                       // .......
};

static const uint8_t lm_vs_downsample_dx11[638] =
{
	0x56, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x01, 0x00, 0x0f, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // VSH.o.><...u_mod
	0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, // elViewProj......
	0x54, 0x02, 0x44, 0x58, 0x42, 0x43, 0x15, 0x82, 0xa5, 0x30, 0x3e, 0xda, 0xbd, 0x5f, 0x44, 0x49, // T.DXBC...0>.._DI
	0x65, 0x0d, 0x2b, 0x90, 0x4e, 0x65, 0x01, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x03, 0x00, // e.+.Ne....T.....
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x4c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, // GNL...........8.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......A.........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x50, 0x4f, // ..............PO
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, // SITION.TEXCOORD.
	0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, // ..OSGNP.........
	0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, // ..8.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........D.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x0c, // ................
	0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, // ..SV_POSITION.TE
	0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x53, 0x48, 0x44, 0x52, 0x74, 0x01, // XCOORD....SHDRt.
	0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, // ..@...]...Y...F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x72, 0x10, //  ........._...r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, // ......_...2.....
	0x00, 0x00, 0x67, 0x00, 0x00, 0x04, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ..g.... ........
	0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0x32, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x68, 0x00, // ..e...2 ......h.
	0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, // ......8.........
	0x00, 0x00, 0x06, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..........F. ...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, // ......8.........
	0x00, 0x00, 0x56, 0x15, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..V.......F. ...
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, // ..F.......F.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x1a, // ..8.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, // ..............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, // ......F.......8.
	0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..........F. ...
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // .......@.....?..
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, // .?...?...?......
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......F.......F.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, // ......6...2.....
	0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x20, // ..F.......6....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x32, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, // ..2 ......F.....
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x00, 0x10, 0x00, 0x40, 0x00,             // ..>.........@.
};

static const uint8_t lm_vs_downsample_metal[659] =
{
	0x56, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x75, 0x73, // VSH.o.><......us
	0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, // ing namespace me
	0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // tal;.struct xlat
	0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x7b, // MtlShaderInput {
	0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, // .  float3 a_posi
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, // tion [[attribute
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, // (0)]];.  float2
	0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x61, 0x74, // a_texcoord0 [[at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, // tribute(1)]];.};
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, // .struct xlatMtlS
	0x68, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x7b, 0x0a, 0x20, 0x20, // haderOutput {.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, // float4 gl_Positi
	0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5d, 0x3b, // on [[position]];
	0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // .  float2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, // oord0;.};.struct
	0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x55, 0x6e, //  xlatMtlShaderUn
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // iform {.  float4
	0x78, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, // x4 u_modelViewPr
	0x6f, 0x6a, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x78, 0x6c, // oj;.};.vertex xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, // atMtlShaderOutpu
	0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x20, 0x28, 0x78, // t xlatMtlMain (x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, // latMtlShaderInpu
	0x74, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x69, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, // t _mtl_i [[stage
	0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, // _in]], constant
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, // xlatMtlShaderUni
	0x66, 0x6f, 0x72, 0x6d, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, // form& _mtl_u [[b
	0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // uffer(0)]]).{.
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, // xlatMtlShaderOut
	0x70, 0x75, 0x74, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x6f, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, // put _mtl_o;.  fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x3b, 0x0a, 0x20, // oat4 tmpvar_1;.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x2e, 0x77, 0x20, 0x3d, 0x20, 0x31, 0x2e, //  tmpvar_1.w = 1.
	0x30, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x2e, 0x78, 0x79, // 0;.  tmpvar_1.xy
	0x7a, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x69, 0x2e, 0x61, 0x5f, 0x70, 0x6f, 0x73, // z = _mtl_i.a_pos
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x6f, 0x2e, // ition;.  _mtl_o.
	0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x5f, // gl_Position = (_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, // mtl_u.u_modelVie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // wProj * tmpvar_1
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x6f, 0x2e, 0x76, 0x5f, 0x74, 0x65, // );.  _mtl_o.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x69, // xcoord0 = _mtl_i
	0x2e, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x20, 0x20, // .a_texcoord0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x6f, 0x3b, 0x0a, 0x7d, // return _mtl_o;.}
	0x0a, 0x0a, 0x00,                                                                               // ...
};

static const uint8_t lm_vs_downsample_glsl[337] =
{
	0x56, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x01, 0x00, 0x0f, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // VSH.o.><...u_mod
	0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, 0x01, 0x00, 0x00, 0x01, 0x00, // elViewProj......
	0x2c, 0x01, 0x00, 0x00, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x68, 0x69, // ,...attribute hi
	0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, // ghp vec3 a_posit
	0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x68, // ion;.attribute h
	0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, // ighp vec2 a_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x68, // oord0;.varying h
	0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ighp vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, // oord0;.uniform h
	0x69, 0x67, 0x68, 0x70, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // ighp mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // lViewProj;.void
	0x6d, 0x61, 0x69, 0x6e, 0x20, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, // main ().{.  high
	0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x3b, // p vec4 tmpvar_1;
	0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x2e, 0x77, 0x20, 0x3d, 0x20, // .  tmpvar_1.w =
	0x31, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x2e, // 1.0;.  tmpvar_1.
	0x78, 0x79, 0x7a, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // xyz = a_position
	0x3b, 0x0a, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, // ;.  gl_Position
	0x3d, 0x20, 0x28, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, // = (u_modelViewPr
	0x6f, 0x6a, 0x20, 0x2a, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x29, 0x3b, 0x0a, // oj * tmpvar_1);.
	0x20, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, //   v_texcoord0 =
	0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, // a_texcoord0;.}..
	0x00,                                                                                           // .
};

// downsample fragment shader

/*
$input v_texcoord0

#include "../common/common.sh"

SAMPLER2D(lm_hemispheres, 0);
uniform vec4 lm_textureSize; // [Hemi W, Hemi H]

void main()
{
	vec2 h_uv 		= vec2((gl_FragCoord.xy - vec2(0.25, 0.25)) * 2.0) / lm_textureSize.xy;
	vec2 texelSize 	= vec2(1.0 / lm_textureSize.x, 1.0 / lm_textureSize.y);

	vec4 lb = texture2DLod(lm_hemispheres, h_uv + vec2(0.0, 		0.0), 0.0);
	vec4 rb = texture2DLod(lm_hemispheres, h_uv + vec2(texelSize.x, 0.0), 0.0);
	vec4 lt = texture2DLod(lm_hemispheres, h_uv + vec2(0.0, 		texelSize.y), 0.0);
	vec4 rt = texture2DLod(lm_hemispheres, h_uv + vec2(texelSize.x, texelSize.y), 0.0);

	gl_FragColor = lb + rb + lt + rt;
}
*/

static const uint8_t lm_fs_downsample_dx9[675] =
{
	0x46, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x02, 0x00, 0x0e, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // FSH.o.><...lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0e, // mispheres0......
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x01, // lm_textureSize..
	0x00, 0x00, 0x01, 0x00, 0x6c, 0x02, 0x00, 0x03, 0xff, 0xff, 0xfe, 0xff, 0x31, 0x00, 0x43, 0x54, // ....l.......1.CT
	0x41, 0x42, 0x1c, 0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x02, 0x00, // AB..............
	0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x44, 0x00, // ..............D.
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........T.....
	0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x00, // ..d...........t.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // ......lm_hemisph
	0x65, 0x72, 0x65, 0x73, 0x00, 0xab, 0x04, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, // eres............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ......lm_texture
	0x53, 0x69, 0x7a, 0x65, 0x00, 0xab, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, // Size............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x73, 0x5f, 0x33, 0x5f, 0x30, 0x00, 0x4d, 0x69, 0x63, // ......ps_3_0.Mic
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53, 0x4c, 0x20, // rosoft (R) HLSL
	0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, // Shader Compiler
	0x31, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x30, 0x30, 0x31, 0x31, 0x2e, 0x31, 0x36, 0x33, 0x38, 0x34, // 10.0.10011.16384
	0x00, 0xab, 0x51, 0x00, 0x00, 0x05, 0x01, 0x00, 0x0f, 0xa0, 0x00, 0x00, 0x80, 0xbe, 0x00, 0x00, // ..Q.............
	0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x02, 0x00, 0x00, // .@...?..........
	0x00, 0x80, 0x00, 0x10, 0x03, 0x90, 0x1f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x90, 0x00, 0x08, // ................
	0x0f, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x80, 0x01, 0x00, 0x00, 0xa0, 0x00, 0x10, // ................
	0xe4, 0x90, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, // ................
	0x55, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x01, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, // U...............
	0x00, 0x02, 0x01, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, // ........U.......
	0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x06, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x04, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x80, 0x00, 0x00, // ................
	0xaa, 0x80, 0x01, 0x00, 0xaa, 0xa0, 0x06, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, // ................
	0x55, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x01, 0x00, 0x02, 0x80, 0x00, 0x00, 0xaa, 0x80, 0x01, 0x00, // U...............
	0xaa, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, // ................
	0xff, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, // .............._.
	0x00, 0x03, 0x02, 0x00, 0x0f, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x01, 0x00, // ................
	0x00, 0x02, 0x01, 0x00, 0x04, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, // ................
	0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xe8, 0x80, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, // ................
	0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x03, 0x00, 0x0f, 0x80, 0x03, 0x00, // ......_.........
	0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80, 0x00, 0x00, // ................
	0xe4, 0x80, 0x01, 0x00, 0xe6, 0x80, 0x01, 0x00, 0x00, 0x02, 0x04, 0x00, 0x0c, 0x80, 0x01, 0x00, // ................
	0xff, 0xa0, 0x5f, 0x00, 0x00, 0x03, 0x04, 0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x00, 0x08, // .._.............
	0xe4, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, // ................
	0xe4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xff, 0xa0, 0x5f, 0x00, // .............._.
	0x00, 0x03, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x00, 0x08, 0xe4, 0xa0, 0x02, 0x00, // ................
	0x00, 0x03, 0x01, 0x00, 0x0f, 0x80, 0x02, 0x00, 0xe4, 0x80, 0x03, 0x00, 0xe4, 0x80, 0x02, 0x00, // ................
	0x00, 0x03, 0x01, 0x00, 0x0f, 0x80, 0x04, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xe4, 0x80, 0x02, 0x00, // ................
	0x00, 0x03, 0x00, 0x08, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80, 0x01, 0x00, 0xe4, 0x80, 0xff, 0xff, // ................
	0x00, 0x00, 0x00,                                                                               // ...
};

static const uint8_t lm_fs_downsample_dx11[1102] =
{
	0x46, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x02, 0x00, 0x0e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, // FSH.o.><...lm_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0e, // xtureSize.......
	0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x30, 0x01, // lm_hemispheres0.
	0x00, 0x00, 0x01, 0x00, 0x14, 0x04, 0x44, 0x58, 0x42, 0x43, 0xb3, 0x4a, 0xdb, 0x7e, 0x04, 0x06, // ......DXBC.J.~..
	0x06, 0x2a, 0x8a, 0xc4, 0xcb, 0xc6, 0x94, 0x8c, 0xfc, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x14, 0x04, // .*..............
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, // ......,.........
	0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, // ..ISGNP.........
	0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, // ..8.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........D.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, // ..SV_POSITION.TE
	0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, // XCOORD....OSGN,.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // .......... .....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, // ................
	0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, // ..SV_TARGET...SH
	0x44, 0x52, 0x54, 0x03, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x59, 0x00, // DRT...@.......Y.
	0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5a, 0x00, // ..F. .........Z.
	0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, // ...`......X....p
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x64, 0x20, 0x00, 0x04, 0x32, 0x10, // ......UU..d ..2.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, // ..........e....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, // ......h.......6.
	0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, // ..2........@....
	0x80, 0xbe, 0x00, 0x00, 0x80, 0xbe, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, // ................
	0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, // ..2.......F.....
	0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, // ..F.......8...2.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, // ......F........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....@...@......
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, // ......2.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......F. .......
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ...............@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....?.. .......
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ......"........@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....?.. .......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, // ..........6.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, // .......@......H.
	0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..F~.......`....
	0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, // ..:.......6.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ..B........@....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x08, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ..............6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ..H.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ......:.......6.
	0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, // ..........F.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ..............6.
	0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ..B........@....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ..H.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ......*.......6.
	0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, // ..........F.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, // ......2.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ..B........@....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, // ..H...........F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......*.......6.
	0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, // ..........F.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ..............F.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ......F.........
	0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, // ..........F.....
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x20, // ..F............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......F.......F.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00,             // ......>.......
};

static const uint8_t lm_fs_downsample_metal[1485] =
{
	0x46, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0xbe, 0x05, 0x00, 0x00, 0x75, 0x73, // FSH.o.><......us
	0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, // ing namespace me
	0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // tal;.struct xlat
	0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x7b, // MtlShaderInput {
	0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // .  float4 gl_Fra
	0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, // gCoord [[positio
	0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, // n]];.};.struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, // latMtlShaderOutp
	0x75, 0x74, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x67, 0x6c, 0x5f, // ut {.  half4 gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, // FragColor;.};.st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, // ruct xlatMtlShad
	0x65, 0x72, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x66, 0x6c, // erUniform {.  fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // oat4 lm_textureS
	0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, // ize;.};.fragment
	0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, //  xlatMtlShaderOu
	0x74, 0x70, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // tput xlatMtlMain
	0x20, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x49, //  (xlatMtlShaderI
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x69, 0x20, 0x5b, 0x5b, 0x73, 0x74, // nput _mtl_i [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, // nt xlatMtlShader
	0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, // Uniform& _mtl_u
	0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x0a, 0x20, 0x20, // [[buffer(0)]].
	0x2c, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ,   texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // oat> lm_hemisphe
	0x72, 0x65, 0x73, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, // res [[texture(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // ]], sampler _mtl
	0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, // smp_lm_hemispher
	0x65, 0x73, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, // es [[sampler(0)]
	0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x53, 0x68, // ]).{.  xlatMtlSh
	0x61, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // aderOutput _mtl_
	0x6f, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, // o;.  float2 tmpv
	0x61, 0x72, 0x5f, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // ar_1;.  tmpvar_1
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x69, 0x2e, 0x67, 0x6c, 0x5f, //  = (((_mtl_i.gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x20, 0x2d, 0x20, 0x66, // FragCoord.xy - f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x35, // loat2(0.25, 0.25
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // )) * 2.0) / _mtl
	0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, // _u.lm_textureSiz
	0x65, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, // e.xy);.  float2
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, // tmpvar_2;.  tmpv
	0x61, 0x72, 0x5f, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x5f, 0x6d, 0x74, // ar_2 = (1.0/(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, // l_u.lm_textureSi
	0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, // ze.xy));.  half4
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, //  tmpvar_3;.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x33, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x28, 0x6c, 0x6d, // var_3 = half4(lm
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x61, 0x6d, // _hemispheres.sam
	0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, 0x6d, 0x5f, 0x68, // ple(_mtlsmp_lm_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, 0x66, 0x6c, 0x6f, // emispheres, (flo
	0x61, 0x74, 0x32, 0x29, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x29, 0x2c, 0x20, // at2)(tmpvar_1),
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // level(0.0)));.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x3b, // float2 tmpvar_4;
	0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x2e, 0x79, 0x20, 0x3d, 0x20, // .  tmpvar_4.y =
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x2e, // 0.0;.  tmpvar_4.
	0x78, 0x20, 0x3d, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x78, 0x3b, 0x0a, // x = tmpvar_2.x;.
	0x20, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, //   half4 tmpvar_5
	0x3b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x36, 0x3b, 0x0a, // ;.  float2 P_6;.
	0x20, 0x20, 0x50, 0x5f, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, //   P_6 = (tmpvar_
	0x31, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x29, 0x3b, 0x0a, 0x20, // 1 + tmpvar_4);.
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, //  tmpvar_5 = half
	0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, // 4(lm_hemispheres
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, // .sample(_mtlsmp_
	0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, // lm_hemispheres,
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x36, 0x29, 0x2c, 0x20, 0x6c, // (float2)(P_6), l
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x66, // evel(0.0)));.  f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x3b, 0x0a, // loat2 tmpvar_7;.
	0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x2e, 0x78, 0x20, 0x3d, 0x20, 0x30, //   tmpvar_7.x = 0
	0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x2e, 0x79, // .0;.  tmpvar_7.y
	0x20, 0x3d, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x79, 0x3b, 0x0a, 0x20, //  = tmpvar_2.y;.
	0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x38, 0x3b, //  half4 tmpvar_8;
	0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x39, 0x3b, 0x0a, 0x20, // .  float2 P_9;.
	0x20, 0x50, 0x5f, 0x39, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, //  P_9 = (tmpvar_1
	0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x29, 0x3b, 0x0a, 0x20, 0x20, //  + tmpvar_7);.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x38, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x34, // tmpvar_8 = half4
	0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2e, // (lm_hemispheres.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, 0x6c, // sample(_mtlsmp_l
	0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x28, // m_hemispheres, (
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x39, 0x29, 0x2c, 0x20, 0x6c, 0x65, // float2)(P_9), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x61, // vel(0.0)));.  ha
	0x6c, 0x66, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x3b, 0x0a, 0x20, // lf4 tmpvar_10;.
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x50, 0x5f, 0x31, 0x31, 0x3b, 0x0a, 0x20, 0x20, //  float2 P_11;.
	0x50, 0x5f, 0x31, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, // P_11 = (tmpvar_1
	0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, //  + tmpvar_2);.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x20, 0x3d, 0x20, 0x68, 0x61, 0x6c, 0x66, // tmpvar_10 = half
	0x34, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, // 4(lm_hemispheres
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x6d, 0x70, 0x5f, // .sample(_mtlsmp_
	0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, // lm_hemispheres,
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x29, 0x28, 0x50, 0x5f, 0x31, 0x31, 0x29, 0x2c, 0x20, // (float2)(P_11),
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // level(0.0)));.
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x6f, 0x2e, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, // _mtl_o.gl_FragCo
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, // lor = ((tmpvar_3
	0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  + tmpvar_5) + (
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x38, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // tmpvar_8 + tmpva
	0x72, 0x5f, 0x31, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // r_10));.  return
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x6f, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,                   //  _mtl_o;.}...
};

static const uint8_t lm_fs_downsample_glsl[991] =
{
	0x46, 0x53, 0x48, 0x04, 0x6f, 0x1e, 0x3e, 0x3c, 0x02, 0x00, 0x0e, 0x6c, 0x6d, 0x5f, 0x68, 0x65, // FSH.o.><...lm_he
	0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0e, // mispheres.......
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x02, 0x01, // lm_textureSize..
	0x00, 0x00, 0x01, 0x00, 0xa6, 0x03, 0x00, 0x00, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ........uniform
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, // sampler2D lm_hem
	0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ispheres;.unifor
	0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6c, 0x6d, 0x5f, // m highp vec4 lm_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x76, 0x6f, 0x69, // textureSize;.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x68, 0x69, // d main ().{.  hi
	0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // ghp vec2 tmpvar_
	0x31, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, // 1;.  tmpvar_1 =
	0x28, 0x28, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, // (((gl_FragCoord.
	0x78, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x32, 0x35, 0x2c, 0x20, // xy - vec2(0.25,
	0x30, 0x2e, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // 0.25)) * 2.0) /
	0x6c, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, // lm_textureSize.x
	0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, // y);.  highp vec2
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, //  tmpvar_2;.  tmp
	0x76, 0x61, 0x72, 0x5f, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x6c, 0x6d, // var_2 = (1.0/(lm
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x79, 0x29, // _textureSize.xy)
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, // );.  lowp vec4 t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, // mpvar_3;.  tmpva
	0x72, 0x5f, 0x33, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, // r_3 = texture2DL
	0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, // od    (lm_hemisp
	0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x2c, // heres, tmpvar_1,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, //  0.0);.  highp v
	0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x3b, 0x0a, 0x20, 0x20, // ec2 tmpvar_4;.
	0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x30, // tmpvar_4.y = 0.0
	0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x34, 0x2e, 0x78, 0x20, 0x3d, // ;.  tmpvar_4.x =
	0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x6c, //  tmpvar_2.x;.  l
	0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // owp vec4 tmpvar_
	0x35, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // 5;.  highp vec2
	0x50, 0x5f, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, // P_6;.  P_6 = (tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, // pvar_1 + tmpvar_
	0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x20, 0x3d, // 4);.  tmpvar_5 =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, //  texture2DLod
	0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, //  (lm_hemispheres
	0x2c, 0x20, 0x50, 0x5f, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x68, // , P_6, 0.0);.  h
	0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, // ighp vec2 tmpvar
	0x5f, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x2e, 0x78, // _7;.  tmpvar_7.x
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, //  = 0.0;.  tmpvar
	0x5f, 0x37, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x2e, // _7.y = tmpvar_2.
	0x79, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, // y;.  lowp vec4 t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // mpvar_8;.  highp
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x50, 0x5f, 0x39, //  vec2 P_9;.  P_9
	0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, 0x2b, 0x20, 0x74, //  = (tmpvar_1 + t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x37, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6d, 0x70, 0x76, // mpvar_7);.  tmpv
	0x61, 0x72, 0x5f, 0x38, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // ar_8 = texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, // Lod    (lm_hemis
	0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, // pheres, P_9, 0.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x77, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x74, // );.  lowp vec4 t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x68, 0x69, 0x67, 0x68, // mpvar_10;.  high
	0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x50, 0x5f, 0x31, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x50, // p vec2 P_11;.  P
	0x5f, 0x31, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x20, // _11 = (tmpvar_1
	0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, // + tmpvar_2);.  t
	0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // mpvar_10 = textu
	0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x28, 0x6c, 0x6d, 0x5f, 0x68, // re2DLod    (lm_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x50, 0x5f, 0x31, 0x31, // emispheres, P_11
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // , 0.0);.  gl_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, // gColor = ((tmpva
	0x72, 0x5f, 0x33, 0x20, 0x2b, 0x20, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x35, 0x29, 0x20, // r_3 + tmpvar_5)
	0x2b, 0x20, 0x28, 0x74, 0x6d, 0x70, 0x76, 0x61, 0x72, 0x5f, 0x38, 0x20, 0x2b, 0x20, 0x74, 0x6d, // + (tmpvar_8 + tm
	0x70, 0x76, 0x61, 0x72, 0x5f, 0x31, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,       // pvar_10));.}...
};

struct lm_context
{
	struct
	{
		const float *transform;
		const unsigned char *positions;
		lm_type positionsType;
		int positionsStride;
		const unsigned char *uvs;
		lm_type uvsType;
		int uvsStride;
		const unsigned char *indices;
		lm_type indicesType;
		unsigned int count;
	} mesh;

	struct
	{
		struct
		{
			unsigned int baseIndex;
			lm_vec3 p[3];
			lm_vec2 uv[3];
		} triangle;

		struct
		{
			int minx, miny;
			int maxx, maxy;
			int x, y;
		} rasterizer;

		struct
		{
			lm_vec3 position;
			lm_vec3 direction;
			lm_vec3 up;
		} sample;

		struct
		{
			int side;
		} hemisphere;
	} meshPosition;

	struct
	{
		int width;
		int height;
		int channels;
		float *data;
	} lightmap;

	struct
	{
		unsigned int size;
		float zNear, zFar;
		struct { float r, g, b; } clearColor;

		uint32_t frameNumber;
		uint8_t bgfxView;
		uint8_t bgfxViewBegin;
		uint8_t bgfxViewEnd;
		bool leftHanded;

#if LM_DEBUG
		unsigned int debugExportCount;
		uint32_t debugReadTextureFrameNumber;
		float* debugData;
		bgfx::TextureHandle debugReadTexture;
#endif

		unsigned int fbHemiCountX;
		unsigned int fbHemiCountY;
		unsigned int fbHemiIndex;
		lm_ivec2 *fbHemiToLightmapLocation;
		bgfx::TextureHandle fbReadTexture;
		bgfx::TextureHandle fbTexture[2];
		int fbTextureWidth[2];
		int fbTextureHeight[2];
		bgfx::FrameBufferHandle fb[2];
		bgfx::UniformHandle textureSizeUniform;
		bgfx::UniformHandle hemispheresTextureUniform;
		bgfx::UniformHandle weightsTextureUniform;

		struct
		{
			bgfx::ProgramHandle programID;
			bgfx::TextureHandle weightsTexture;
		} firstPass;
		struct
		{
			bgfx::ProgramHandle programID;
		} downsamplePass;
		struct
		{
			float* data;
			uint32_t readTextureFrameNumber;
			lm_bool pboTransferStarted;
			unsigned int fbHemiCount;
			lm_ivec2 *fbHemiToLightmapLocation;
		} transfer;
	} hemisphere;
};

static void lm_nextBGFXView(lm_context *ctx)
{
	ctx->hemisphere.bgfxView++;

	if (ctx->hemisphere.bgfxView > ctx->hemisphere.bgfxViewEnd)
	{
		ctx->hemisphere.frameNumber = bgfx::frame();
		ctx->hemisphere.bgfxView = ctx->hemisphere.bgfxViewBegin;
	}
}

static lm_bool lm_hasConservativeTriangleRasterizerFinished(lm_context *ctx)
{
	return ctx->meshPosition.rasterizer.y >= ctx->meshPosition.rasterizer.maxy;
}

static void lm_moveToNextPotentialConservativeTriangleRasterizerPosition(lm_context *ctx)
{
	if (++ctx->meshPosition.rasterizer.x >= ctx->meshPosition.rasterizer.maxx)
	{
		ctx->meshPosition.rasterizer.x = ctx->meshPosition.rasterizer.minx;
		++ctx->meshPosition.rasterizer.y;
	}
}

static lm_bool lm_trySamplingConservativeTriangleRasterizerPosition(lm_context *ctx)
{
	if (lm_hasConservativeTriangleRasterizerFinished(ctx))
		return LM_FALSE;

	lm_vec2 pixel[16];
	pixel[0] = lm_v2i(ctx->meshPosition.rasterizer.x    , ctx->meshPosition.rasterizer.y    );
	pixel[1] = lm_v2i(ctx->meshPosition.rasterizer.x + 1, ctx->meshPosition.rasterizer.y    );
	pixel[2] = lm_v2i(ctx->meshPosition.rasterizer.x + 1, ctx->meshPosition.rasterizer.y + 1);
	pixel[3] = lm_v2i(ctx->meshPosition.rasterizer.x    , ctx->meshPosition.rasterizer.y + 1);

	lm_vec2 res[16];
	int nRes = lm_convexClip(pixel, 4, ctx->meshPosition.triangle.uv, 3, res);
	if (nRes > 0)
	{
		// do centroid sampling
		lm_vec2 centroid = res[0];
		float area = res[nRes - 1].x * res[0].y - res[nRes - 1].y * res[0].x;
		for (int i = 1; i < nRes; i++)
		{
			centroid = lm_add2(centroid, res[i]);
			area += res[i - 1].x * res[i].y - res[i - 1].y * res[i].x;
		}
		centroid = lm_div2(centroid, (float)nRes);
		area = lm_absf(area / 2.0f);

		if (area > 0.0f)
		{
			// calculate 3D sample position and orientation
			lm_vec2 uv = lm_toBarycentric(
				ctx->meshPosition.triangle.uv[0],
				ctx->meshPosition.triangle.uv[1],
				ctx->meshPosition.triangle.uv[2],
				centroid);

			// sample it only if its's not degenerate
			if (lm_finite2(uv))
			{
				lm_vec3 p0 = ctx->meshPosition.triangle.p[0];
				lm_vec3 p1 = ctx->meshPosition.triangle.p[1];
				lm_vec3 p2 = ctx->meshPosition.triangle.p[2];
				lm_vec3 v1 = lm_sub3(p1, p0);
				lm_vec3 v2 = lm_sub3(p2, p0);
				ctx->meshPosition.sample.position = lm_add3(p0, lm_add3(lm_scale3(v2, uv.x), lm_scale3(v1, uv.y)));
				ctx->meshPosition.sample.direction = lm_normalize3(lm_cross3(v1, v2));

				if (lm_finite3(ctx->meshPosition.sample.position) &&
					lm_finite3(ctx->meshPosition.sample.direction) &&
					lm_length3sq(ctx->meshPosition.sample.direction) > 0.5f) // don't allow 0.0f. should always be ~1.0f
				{
					// randomize rotation
					lm_vec3 up = lm_v3(0.0f, 1.0f, 0.0f);
					if (lm_absf(lm_dot3(up, ctx->meshPosition.sample.direction)) > 0.8f)
						up = lm_v3(0.0f, 0.0f, 1.0f);
					lm_vec3 side = lm_normalize3(lm_cross3(up, ctx->meshPosition.sample.direction));
					up = lm_normalize3(lm_cross3(side, ctx->meshPosition.sample.direction));
					int rx = ctx->meshPosition.rasterizer.x % 3;
					int ry = ctx->meshPosition.rasterizer.y % 3;
					const float pi = 3.14159265358979f; // no c++ M_PI?
					const float baseAngle = 0.03f * pi;
					const float baseAngles[3][3] = {
						{ baseAngle, baseAngle + 1.0f / 3.0f, baseAngle + 2.0f / 3.0f },
						{ baseAngle + 1.0f / 3.0f, baseAngle + 2.0f / 3.0f, baseAngle },
						{ baseAngle + 2.0f / 3.0f, baseAngle, baseAngle + 1.0f / 3.0f }
					};
					float phi = 2.0f * pi * baseAngles[ry][rx] + 0.1f * ((float)rand() / (float)RAND_MAX);
					ctx->meshPosition.sample.up = lm_normalize3(lm_add3(lm_scale3(side, cosf(phi)), lm_scale3(up, sinf(phi))));

					return LM_TRUE;
				}
			}
		}
	}
	return LM_FALSE;
}

// returns true if a sampling position was found and
// false if we finished rasterizing the current triangle
static lm_bool lm_findFirstConservativeTriangleRasterizerPosition(lm_context *ctx)
{
	while (!lm_trySamplingConservativeTriangleRasterizerPosition(ctx))
	{
		lm_moveToNextPotentialConservativeTriangleRasterizerPosition(ctx);
		if (lm_hasConservativeTriangleRasterizerFinished(ctx))
			return LM_FALSE;
	}
	return LM_TRUE;
}

static lm_bool lm_findNextConservativeTriangleRasterizerPosition(lm_context *ctx)
{
	lm_moveToNextPotentialConservativeTriangleRasterizerPosition(ctx);
	return lm_findFirstConservativeTriangleRasterizerPosition(ctx);
}

static void lm_beginProcessHemisphereBatch(lm_context *ctx)
{
	if (!ctx->hemisphere.fbHemiIndex)
		return; // nothing to do

	int fbRead = 0;
	int fbWrite = 1;

	float view[16];
	float proj[16];

	bx::mtxIdentity(view);
	bx::mtxOrtho(proj, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 100.0f);

#if LM_DEBUG
	// Copy over to debug texture
	bgfx::blit(ctx->hemisphere.bgfxView, ctx->hemisphere.debugReadTexture, 0, 0, 0, 0, ctx->hemisphere.fbTexture[fbRead], 0, 0, 0, 0);
	bgfx::touch(ctx->hemisphere.bgfxView);
	lm_nextBGFXView(ctx);
	ctx->hemisphere.debugReadTextureFrameNumber = bgfx::readTexture(ctx->hemisphere.debugReadTexture, ctx->hemisphere.debugData);
	bgfx::touch(ctx->hemisphere.bgfxView);
#endif

	// weighted downsampling pass
	int outHemiSize = ctx->hemisphere.size / 2;
	int width		= outHemiSize * ctx->hemisphere.fbHemiCountX;
	int height		= outHemiSize * ctx->hemisphere.fbHemiCountY;

	bgfx::setViewRect(ctx->hemisphere.bgfxView, 0, 0, width, height);
	bgfx::setViewFrameBuffer(ctx->hemisphere.bgfxView, ctx->hemisphere.fb[fbWrite]);
	bgfx::setViewTransform(ctx->hemisphere.bgfxView, view, proj);
	bgfx::setState(0 | BGFX_STATE_RGB_WRITE | BGFX_STATE_ALPHA_WRITE);
	bgfx::setTexture(0, ctx->hemisphere.hemispheresTextureUniform, ctx->hemisphere.fbTexture[fbRead]);
	bgfx::setTexture(1, ctx->hemisphere.weightsTextureUniform, ctx->hemisphere.firstPass.weightsTexture);

	float textureSize[4] = {	(float)ctx->hemisphere.fbTextureWidth[fbRead],
								(float)ctx->hemisphere.fbTextureHeight[fbRead],
								(float)ctx->hemisphere.size * 3.0f,
								(float)ctx->hemisphere.size };
	bgfx::setUniform(ctx->hemisphere.textureSizeUniform, textureSize);

	lm_screenSpaceQuad((float)width, (float)height, 0.5f, false);
	bgfx::submit(ctx->hemisphere.bgfxView, ctx->hemisphere.firstPass.programID);
	lm_nextBGFXView(ctx);

	// downsampling passes
	while (outHemiSize > 1)
	{
		LM_SWAP(int, fbRead, fbWrite);
		outHemiSize /= 2;

		bgfx::setViewRect(ctx->hemisphere.bgfxView, 0, 0, outHemiSize * ctx->hemisphere.fbHemiCountX, outHemiSize * ctx->hemisphere.fbHemiCountY);
		bgfx::setViewTransform(ctx->hemisphere.bgfxView, view, proj);
		bgfx::setViewFrameBuffer(ctx->hemisphere.bgfxView, ctx->hemisphere.fb[fbWrite]);
		bgfx::setState(0 | BGFX_STATE_RGB_WRITE | BGFX_STATE_ALPHA_WRITE);
		bgfx::setTexture(0, ctx->hemisphere.hemispheresTextureUniform, ctx->hemisphere.fbTexture[fbRead]);

		float textureSize[4] = { (float)ctx->hemisphere.fbTextureWidth[fbRead], (float)ctx->hemisphere.fbTextureHeight[fbRead], 0.0f, 0.0f };
		bgfx::setUniform(ctx->hemisphere.textureSizeUniform, textureSize);

		lm_screenSpaceQuad((float)(outHemiSize * ctx->hemisphere.fbHemiCountX), (float)(outHemiSize * ctx->hemisphere.fbHemiCountY), 0.5f, false);

		bgfx::submit(ctx->hemisphere.bgfxView, ctx->hemisphere.downsamplePass.programID);
		lm_nextBGFXView(ctx);
	}

	// Copy over to read texture
	bgfx::blit(ctx->hemisphere.bgfxView, ctx->hemisphere.fbReadTexture, 0, 0, 0, 0, ctx->hemisphere.fbTexture[fbWrite], 0, 0, 0, 0);
	bgfx::touch(ctx->hemisphere.bgfxView);
	lm_nextBGFXView(ctx);

	// start GPU->CPU transfer of downsampled hemispheres
	ctx->hemisphere.transfer.readTextureFrameNumber = bgfx::readTexture(ctx->hemisphere.fbReadTexture, ctx->hemisphere.transfer.data);

	LM_SWAP(lm_ivec2*, ctx->hemisphere.transfer.fbHemiToLightmapLocation, ctx->hemisphere.fbHemiToLightmapLocation);
	ctx->hemisphere.transfer.fbHemiCount = ctx->hemisphere.fbHemiIndex;
	ctx->hemisphere.transfer.pboTransferStarted = LM_TRUE;

	ctx->hemisphere.fbHemiIndex = 0;
}

static void lm_finishProcessHemisphereBatch(lm_context *ctx)
{
	if (!ctx->hemisphere.transfer.pboTransferStarted)
		return; // nothing to do

#if LM_DEBUG
	while (ctx->hemisphere.frameNumber < ctx->hemisphere.debugReadTextureFrameNumber)
	{
		ctx->hemisphere.frameNumber = bgfx::frame();
	}

	char debugName[50];
	sprintf(debugName, "%d_render.tga", ctx->hemisphere.debugExportCount);
	lmImageSaveTGAf(debugName, ctx->hemisphere.debugData, ctx->hemisphere.fbTextureWidth[0], ctx->hemisphere.fbTextureHeight[0], 4, 1.0f);
#endif

	while (ctx->hemisphere.frameNumber < ctx->hemisphere.transfer.readTextureFrameNumber)
	{
		ctx->hemisphere.frameNumber = bgfx::frame();
	}

	// finish the GPU->CPU transfer of downsampled hemispheres
	float *hemi = ctx->hemisphere.transfer.data;
	assert(hemi);
	if (!hemi)
	{
		fprintf(stderr, "Fatal error! Could not map hemisphere buffer!\n");
		exit(-1);
	}

#if LM_DEBUG
	char name[50];
	sprintf(name, "%d_hemisphere.tga", ctx->hemisphere.debugExportCount);
	lmImageSaveTGAf(name, hemi, ctx->hemisphere.fbHemiCountX, ctx->hemisphere.fbHemiCountY, 4, 1.0f);
	ctx->hemisphere.debugExportCount++;
#endif

	// write results to lightmap texture
	unsigned int hemiIndex = 0;
	for (unsigned int hy = 0; hy < ctx->hemisphere.fbHemiCountY; hy++)
	{
		for (unsigned int hx = 0; hx < ctx->hemisphere.fbHemiCountX; hx++)
		{
			float *c = hemi + (hy * ctx->hemisphere.fbHemiCountX + hx) * 4;
			float validity = c[3];

			lm_ivec2 lmUV = ctx->hemisphere.transfer.fbHemiToLightmapLocation[hy * ctx->hemisphere.fbHemiCountX + hx];
			float *lm = ctx->lightmap.data + (lmUV.y * ctx->lightmap.width + lmUV.x) * ctx->lightmap.channels;
			if (validity > 0.9)
			{
				float scale = 1.0f / validity;
				switch (ctx->lightmap.channels)
				{
				case 1:
					lm[0] = lm_maxf((c[0] + c[1] + c[2]) * scale / 3.0f, FLT_MIN);
					break;
				case 2:
					lm[0] = lm_maxf((c[0] + c[1] + c[2]) * scale / 3.0f, FLT_MIN);
					lm[1] = 1.0f; // do we want to support this format?
					break;
				case 3:
					lm[0] = lm_maxf(c[0] * scale, FLT_MIN);
					lm[1] = lm_maxf(c[1] * scale, FLT_MIN);
					lm[2] = lm_maxf(c[2] * scale, FLT_MIN);
					break;
				case 4:
					lm[0] = lm_maxf(c[0] * scale, FLT_MIN);
					lm[1] = lm_maxf(c[1] * scale, FLT_MIN);
					lm[2] = lm_maxf(c[2] * scale, FLT_MIN);
					lm[3] = 1.0f;
					break;
				default:
					assert(LM_FALSE);
					break;
				}
			}
			else
			{
				for (int i = 0; i < ctx->lightmap.channels; i++)
					lm[i] = 0.0f; // zero = not determined / not used
			}

			if (++hemiIndex == ctx->hemisphere.transfer.fbHemiCount)
				goto done;
		}
	}
done:
	ctx->hemisphere.transfer.pboTransferStarted = LM_FALSE;
}

static void lm_setView(
	int* viewport, int x, int y, int w, int h,
	float* view, lm_vec3 pos, lm_vec3 dir, lm_vec3 up,
	float* proj, float l, float r, float b, float t, float n, float f,
	bool leftHanded = true)
{
	// viewport
	viewport[0] = x; viewport[1] = y; viewport[2] = w; viewport[3] = h;

	// view matrix: lookAt(pos, pos + dir, up)
	lm_vec3 side = lm_cross3(dir, up);
	//up = cross(side, dir);
	dir = lm_negate3(dir); pos = lm_negate3(pos);
	view[0] = side.x;              view[1] = up.x;              view[2] = dir.x;              view[3] = 0.0f;
	view[4] = side.y;              view[5] = up.y;              view[6] = dir.y;              view[7] = 0.0f;
	view[8] = side.z;              view[9] = up.z;              view[10] = dir.z;             view[11] = 0.0f;
	view[12] = lm_dot3(side, pos); view[13] = lm_dot3(up, pos); view[14] = lm_dot3(dir, pos); view[15] = 1.0f;

	// projection matrix: frustum(l, r, b, t, n, f)
	if (leftHanded)
		bx::mtxProjLh(proj, b, t, l, r, n, f);
	else
		bx::mtxProjRh(proj, b, t, l, r, n, f);

	// Original (right handed):
	//float ilr = 1.0f / (r - l), ibt = 1.0f / (t - b), ninf = -1.0f / (f - n), n2 = 2.0f * n;
	//proj[0] = n2 * ilr;       proj[1] = 0.0f;           proj[2] = 0.0f;            proj[3] = 0.0f;
	//proj[4] = 0.0f;           proj[5] = n2 * ibt;       proj[6] = 0.0f;            proj[7] = 0.0f;
	//proj[8] = (r + l) * ilr;  proj[9] = (t + b) * ibt;  proj[10] = (f + n) * ninf; proj[11] = -1.0f;
	//proj[12] = 0.0f;          proj[13] = 0.0f;          proj[14] = f * n2 * ninf;  proj[15] = 0.0f;
}

// returns true if a hemisphere side was prepared for rendering and
// false if we finished the current hemisphere
static lm_bool lm_beginSampleHemisphere(lm_context *ctx, int* viewport, float* view, float* proj, uint8_t* outbgfxView)
{
	if (ctx->meshPosition.hemisphere.side >= 5)
		return LM_FALSE;

	// prepare hemisphere
	if (ctx->meshPosition.hemisphere.side == 0)
	{
		if (ctx->hemisphere.fbHemiIndex == 0)
		{
			bgfx::resetView(ctx->hemisphere.bgfxView);

			// prepare hemisphere batch
			bgfx::setViewClear( // clear to valid background pixels!
				ctx->hemisphere.bgfxView,
				BGFX_CLEAR_COLOR | BGFX_CLEAR_DEPTH,
				LM_BGFX_COLOR_RGBA(	(uint8_t)(ctx->hemisphere.clearColor.r * 255),
									(uint8_t)(ctx->hemisphere.clearColor.g * 255),
									(uint8_t)(ctx->hemisphere.clearColor.b * 255),
									255));

			bgfx::setViewFrameBuffer(ctx->hemisphere.bgfxView, ctx->hemisphere.fb[0]);
			bgfx::setViewRect(ctx->hemisphere.bgfxView, 0, 0, ctx->hemisphere.fbTextureWidth[0], ctx->hemisphere.fbTextureHeight[0]);
			bgfx::touch(ctx->hemisphere.bgfxView);

			lm_nextBGFXView(ctx);
		}
		ctx->hemisphere.fbHemiToLightmapLocation[ctx->hemisphere.fbHemiIndex] =
			lm_i2(ctx->meshPosition.rasterizer.x, ctx->meshPosition.rasterizer.y);
	}

	bgfx::resetView(ctx->hemisphere.bgfxView);
	*outbgfxView = ctx->hemisphere.bgfxView;
	bgfx::setViewFrameBuffer(ctx->hemisphere.bgfxView, ctx->hemisphere.fb[0]);

	// find the target position in the batch
	int x = (ctx->hemisphere.fbHemiIndex % ctx->hemisphere.fbHemiCountX) * ctx->hemisphere.size * 3;
	int y = (ctx->hemisphere.fbHemiIndex / ctx->hemisphere.fbHemiCountX) * ctx->hemisphere.size;

	int size = ctx->hemisphere.size;
	float zNear = ctx->hemisphere.zNear;
	float zFar = ctx->hemisphere.zFar;

	lm_vec3 pos = ctx->meshPosition.sample.position;
	lm_vec3 dir = ctx->meshPosition.sample.direction;
	lm_vec3 up = ctx->meshPosition.sample.up;
	lm_vec3 right = lm_cross3(dir, up);

	// find the view parameters of the hemisphere side that we will render next
	// hemisphere layout in the framebuffer:
	//       +-------+---+---+-------+
	//       |       |   |   |   D   |
	//       |   C   | R | L +-------+
	//       |       |   |   |   U   |
	//       +-------+---+---+-------+
	switch (ctx->meshPosition.hemisphere.side)
	{
	case 0: // center
		lm_setView(viewport, x, y, size, size,
				   view,     pos, dir, up,
				   proj,     -zNear, zNear, -zNear, zNear, zNear, zFar, ctx->hemisphere.leftHanded);
		break;
	case 1: // right
		lm_setView(viewport, size + x, y, size / 2, size,
				   view,     pos, right, up,
				   proj,     -zNear, 0.0f, -zNear, zNear, zNear, zFar, ctx->hemisphere.leftHanded);
		break;
	case 2: // left
		lm_setView(viewport, size + x + size / 2, y, size / 2, size,
				   view,     pos, lm_negate3(right), up,
				   proj,     0.0f, zNear, -zNear, zNear, zNear, zFar, ctx->hemisphere.leftHanded);
		break;
	case 3: // down
		lm_setView(viewport, 2 * size + x, y + size / 2, size, size / 2,
				   view,     pos, lm_negate3(up), dir,
				   proj,     -zNear, zNear, 0.0f, zNear, zNear, zFar, ctx->hemisphere.leftHanded);
		break;
	case 4: // up
		lm_setView(viewport, 2 * size + x, y, size, size / 2,
				   view,     pos, up, lm_negate3(dir),
				   proj,     -zNear, zNear, -zNear, 0.0f, zNear, zFar, ctx->hemisphere.leftHanded);
		break;
	default:
		assert(LM_FALSE);
		break;
	}

	return LM_TRUE;
}

static void lm_endSampleHemisphere(lm_context *ctx)
{
	if (++ctx->meshPosition.hemisphere.side == 5)
	{
		// finish hemisphere
		if (++ctx->hemisphere.fbHemiIndex == ctx->hemisphere.fbHemiCountX * ctx->hemisphere.fbHemiCountY)
		{
			// finish hemisphere batch and start a new one
			lm_finishProcessHemisphereBatch(ctx); // read and process the previous data and finish the batch
			lm_beginProcessHemisphereBatch(ctx); // downsample new hemisphere batch and kick off transfer
		}
	}

	lm_nextBGFXView(ctx);
}

static lm_vec3 lm_transform(const float *m, lm_vec3 v)
{
	if (!m)
		return v;
	lm_vec3 r;
	r.x =     m[0] * v.x + m[4] * v.y + m[ 8] * v.z + m[12];
	r.y =     m[1] * v.x + m[5] * v.y + m[ 9] * v.z + m[13];
	r.z =     m[2] * v.x + m[6] * v.y + m[10] * v.z + m[14];
	float d = m[3] * v.x + m[7] * v.y + m[11] * v.z + m[15];
	assert(lm_absf(d - 1.0f) < 0.00001f); // could divide by d, but this shouldn't be a projection transform!
	return r;
}

static void lm_setMeshPosition(lm_context *ctx, unsigned int indicesTriangleBaseIndex)
{
	// fetch triangle at the specified indicesTriangleBaseIndex
	ctx->meshPosition.triangle.baseIndex = indicesTriangleBaseIndex;

	// load and transform triangle to process next
	lm_vec2 uvMin = lm_v2(FLT_MAX, FLT_MAX), uvMax = lm_v2(-FLT_MAX, -FLT_MAX);
	lm_vec2 uvScale = lm_v2i(ctx->lightmap.width, ctx->lightmap.height);
	for (int i = 0; i < 3; i++)
	{
		// decode index
		unsigned int vIndex = 0;
		switch (ctx->mesh.indicesType)
		{
		case LM_NONE:
			vIndex = ctx->meshPosition.triangle.baseIndex + i;
			break;
		case LM_UNSIGNED_BYTE:
			vIndex = ((const unsigned char*)ctx->mesh.indices + ctx->meshPosition.triangle.baseIndex)[i];
			break;
		case LM_UNSIGNED_SHORT:
			vIndex = ((const unsigned short*)ctx->mesh.indices + ctx->meshPosition.triangle.baseIndex)[i];
			break;
		case LM_UNSIGNED_INT:
			vIndex = ((const unsigned int*)ctx->mesh.indices + ctx->meshPosition.triangle.baseIndex)[i];
			break;
		default:
			assert(LM_FALSE);
			break;
		}

		// decode and pre-transform vertex position
		const void *pPtr = ctx->mesh.positions + vIndex * ctx->mesh.positionsStride;
		lm_vec3 p = lm_v3(0.0f, 0.0f, 0.0f);
		switch (ctx->mesh.positionsType)
		{
		// TODO: signed formats
		case LM_UNSIGNED_BYTE: {
			const unsigned char *uc = (const unsigned char*)pPtr;
			p = lm_v3(uc[0], uc[1], uc[2]);
		} break;
		case LM_UNSIGNED_SHORT: {
			const unsigned short *us = (const unsigned short*)pPtr;
			p = lm_v3(us[0], us[1], us[2]);
		} break;
		case LM_UNSIGNED_INT: {
			const unsigned int *ui = (const unsigned int*)pPtr;
			p = lm_v3((float)ui[0], (float)ui[1], (float)ui[2]);
		} break;
		case LM_FLOAT: {
			p = *(const lm_vec3*)pPtr;
		} break;
		default: {
			assert(LM_FALSE);
		} break;
		}
		ctx->meshPosition.triangle.p[i] = lm_transform(ctx->mesh.transform, p);

		// decode and scale (to lightmap resolution) vertex lightmap texture coords
		const void *uvPtr = ctx->mesh.uvs + vIndex * ctx->mesh.uvsStride;
		lm_vec2 uv = lm_v2(0.0f, 0.0f);
		switch (ctx->mesh.uvsType)
		{
		case LM_UNSIGNED_BYTE: {
			const unsigned char *uc = (const unsigned char*)uvPtr;
			uv = lm_v2(uc[0] / (float)UCHAR_MAX, uc[1] / (float)UCHAR_MAX);
		} break;
		case LM_UNSIGNED_SHORT: {
			const unsigned short *us = (const unsigned short*)uvPtr;
			uv = lm_v2(us[0] / (float)USHRT_MAX, us[1] / (float)USHRT_MAX);
		} break;
		case LM_UNSIGNED_INT: {
			const unsigned int *ui = (const unsigned int*)uvPtr;
			uv = lm_v2(ui[0] / (float)UINT_MAX, ui[1] / (float)UINT_MAX);
		} break;
		case LM_FLOAT: {
			uv = *(const lm_vec2*)uvPtr;
		} break;
		default: {
			assert(LM_FALSE);
		} break;
		}
		ctx->meshPosition.triangle.uv[i] = lm_mul2(uv, uvScale);

		// update bounds on lightmap
		uvMin = lm_min2(uvMin, ctx->meshPosition.triangle.uv[i]);
		uvMax = lm_max2(uvMax, ctx->meshPosition.triangle.uv[i]);
	}

	// calculate area of interest (on lightmap) for conservative rasterization
	lm_vec2 bbMin = lm_floor2(uvMin);
	lm_vec2 bbMax = lm_ceil2 (uvMax);
	ctx->meshPosition.rasterizer.minx = ctx->meshPosition.rasterizer.x = lm_maxi((int)bbMin.x - 1, 0);
	ctx->meshPosition.rasterizer.miny = ctx->meshPosition.rasterizer.y = lm_maxi((int)bbMin.y - 1, 0);
	ctx->meshPosition.rasterizer.maxx = lm_mini((int)bbMax.x + 1, ctx->lightmap.width);
	ctx->meshPosition.rasterizer.maxy = lm_mini((int)bbMax.y + 1, ctx->lightmap.height);
	assert(ctx->meshPosition.rasterizer.minx < ctx->meshPosition.rasterizer.maxx &&
		   ctx->meshPosition.rasterizer.miny < ctx->meshPosition.rasterizer.maxy);

	// try moving to first valid sample position
	if (lm_findFirstConservativeTriangleRasterizerPosition(ctx))
		ctx->meshPosition.hemisphere.side = 0; // we can start sampling the hemisphere
	else
		ctx->meshPosition.hemisphere.side = 5; // no samples on this triangle! put hemisphere sampler into finished state
}

static float lm_defaultWeights(float, void*)
{
	return 1.0f;
}

lm_context *lmCreate(int hemisphereSize, float zNear, float zFar,
	float clearR, float clearG, float clearB, uint8_t bgfxViewBegin, uint8_t bgfxViewEnd,
	bool leftHanded)
{
	lm_context *ctx = (lm_context*)LM_CALLOC(1, sizeof(lm_context));
	lm_screenSpaceVertex::init();

	ctx->hemisphere.size			= hemisphereSize;
	ctx->hemisphere.zNear			= zNear;
	ctx->hemisphere.zFar			= zFar;
	ctx->hemisphere.clearColor.r	= clearR;
	ctx->hemisphere.clearColor.g	= clearG;
	ctx->hemisphere.clearColor.b	= clearB;
	ctx->hemisphere.bgfxView		= bgfxViewBegin;
	ctx->hemisphere.bgfxViewBegin	= bgfxViewBegin;
	ctx->hemisphere.bgfxViewEnd		= bgfxViewEnd;
	ctx->hemisphere.leftHanded		= leftHanded;

	// calculate hemisphere batch size
	ctx->hemisphere.fbHemiCountX = 1536 / (3 * ctx->hemisphere.size);
	ctx->hemisphere.fbHemiCountY = 512 / ctx->hemisphere.size;

	// hemisphere batch framebuffers
	ctx->hemisphere.fbTextureWidth[0]	= ctx->hemisphere.fbHemiCountX * ctx->hemisphere.size * 3;
	ctx->hemisphere.fbTextureWidth[1]	= ctx->hemisphere.fbHemiCountX * ctx->hemisphere.size / 2;
	ctx->hemisphere.fbTextureHeight[0]	= ctx->hemisphere.fbHemiCountY * ctx->hemisphere.size;
	ctx->hemisphere.fbTextureHeight[1]	= ctx->hemisphere.fbHemiCountY * ctx->hemisphere.size / 2;

	// create render targets
	for (int i = 0; i < 2; ++i)
	{
		ctx->hemisphere.fbTexture[i]		= bgfx::createTexture2D(ctx->hemisphere.fbTextureWidth[i], ctx->hemisphere.fbTextureHeight[i], 1, bgfx::TextureFormat::RGBA32F,
												BGFX_TEXTURE_U_CLAMP | BGFX_TEXTURE_V_CLAMP | BGFX_TEXTURE_MIN_POINT | BGFX_TEXTURE_MAG_POINT | BGFX_TEXTURE_RT);
		bgfx::TextureHandle fbTextures[]	=
		{
			ctx->hemisphere.fbTexture[i],
			bgfx::createTexture2D(ctx->hemisphere.fbTextureWidth[i], ctx->hemisphere.fbTextureHeight[i], 1, bgfx::TextureFormat::D24, BGFX_TEXTURE_RT)
		};
		ctx->hemisphere.fb[i]				= bgfx::createFrameBuffer(BX_COUNTOF(fbTextures), fbTextures);
	}

	// needed for async GPU->CPU transfers of the downsampled hemisphere results
	ctx->hemisphere.transfer.data	= (float*)LM_CALLOC(ctx->hemisphere.fbHemiCountX * ctx->hemisphere.fbHemiCountY * 4, sizeof(float));
	ctx->hemisphere.fbReadTexture	= bgfx::createTexture2D(ctx->hemisphere.fbHemiCountX, ctx->hemisphere.fbHemiCountY, 1, bgfx::TextureFormat::RGBA32F,
										BGFX_TEXTURE_U_CLAMP | BGFX_TEXTURE_V_CLAMP | BGFX_TEXTURE_BLIT_DST | BGFX_TEXTURE_READ_BACK);

	// uniforms
	ctx->hemisphere.hemispheresTextureUniform	= bgfx::createUniform("lm_hemispheres", bgfx::UniformType::Int1);
	ctx->hemisphere.weightsTextureUniform		= bgfx::createUniform("lm_weights",		bgfx::UniformType::Int1);
	ctx->hemisphere.textureSizeUniform			= bgfx::createUniform("lm_textureSize", bgfx::UniformType::Vec4);

#if LM_DEBUG
	ctx->hemisphere.debugData			= (float*)LM_CALLOC(ctx->hemisphere.fbTextureWidth[0] * ctx->hemisphere.fbTextureHeight[0] * 4, sizeof(float));
	ctx->hemisphere.debugExportCount	= 0;
	ctx->hemisphere.debugReadTexture	= bgfx::createTexture2D(ctx->hemisphere.fbTextureWidth[0], ctx->hemisphere.fbTextureHeight[0], 1, bgfx::TextureFormat::RGBA32F,
											BGFX_TEXTURE_U_CLAMP | BGFX_TEXTURE_V_CLAMP | BGFX_TEXTURE_BLIT_DST | BGFX_TEXTURE_READ_BACK);
#endif

	// shaders
	const bgfx::Memory* vs_weighted_downsample;
	const bgfx::Memory* fs_weighted_downsample;
	const bgfx::Memory* vs_downsample;
	const bgfx::Memory* fs_downsample;

	switch (bgfx::getRendererType())
	{
		case bgfx::RendererType::Direct3D9:
			vs_weighted_downsample	= bgfx::makeRef(lm_vs_downsample_dx9, sizeof(lm_vs_downsample_dx9));
			fs_weighted_downsample	= bgfx::makeRef(lm_fs_weighted_downsample_dx9, sizeof(lm_fs_weighted_downsample_dx9));
			vs_downsample			= bgfx::makeRef(lm_vs_downsample_dx9, sizeof(lm_vs_downsample_dx9));
			fs_downsample			= bgfx::makeRef(lm_fs_downsample_dx9, sizeof(lm_fs_downsample_dx9));
			break;

		case bgfx::RendererType::Direct3D11:
		case bgfx::RendererType::Direct3D12:
			vs_weighted_downsample	= bgfx::makeRef(lm_vs_downsample_dx11, sizeof(lm_vs_downsample_dx11));
			fs_weighted_downsample	= bgfx::makeRef(lm_fs_weighted_downsample_dx11, sizeof(lm_fs_weighted_downsample_dx11));
			vs_downsample			= bgfx::makeRef(lm_vs_downsample_dx11, sizeof(lm_vs_downsample_dx11));
			fs_downsample			= bgfx::makeRef(lm_fs_downsample_dx11, sizeof(lm_fs_downsample_dx11));
			break;

		case bgfx::RendererType::Metal:
			vs_weighted_downsample	= bgfx::makeRef(lm_vs_downsample_metal, sizeof(lm_vs_downsample_metal));
			fs_weighted_downsample	= bgfx::makeRef(lm_fs_weighted_downsample_metal, sizeof(lm_fs_weighted_downsample_metal));
			vs_downsample			= bgfx::makeRef(lm_vs_downsample_metal, sizeof(lm_vs_downsample_metal));
			fs_downsample			= bgfx::makeRef(lm_fs_downsample_metal, sizeof(lm_fs_downsample_metal));
			break;

		default:
			vs_weighted_downsample	= bgfx::makeRef(lm_vs_downsample_glsl, sizeof(lm_vs_downsample_glsl));
			fs_weighted_downsample	= bgfx::makeRef(lm_fs_weighted_downsample_glsl, sizeof(lm_fs_weighted_downsample_glsl));
			vs_downsample			= bgfx::makeRef(lm_vs_downsample_glsl, sizeof(lm_vs_downsample_glsl));
			fs_downsample			= bgfx::makeRef(lm_fs_downsample_glsl, sizeof(lm_fs_downsample_glsl));
			break;
	}

	ctx->hemisphere.firstPass.programID = bgfx::createProgram(
		bgfx::createShader(vs_weighted_downsample)
		, bgfx::createShader(fs_weighted_downsample)
		, true
		);

	ctx->hemisphere.downsamplePass.programID = bgfx::createProgram(
		bgfx::createShader(vs_downsample)
		, bgfx::createShader(fs_downsample)
		, true
		);

	// hemisphere weights texture
	ctx->hemisphere.firstPass.weightsTexture.idx = bgfx::invalidHandle;
	lmSetHemisphereWeights(ctx, lm_defaultWeights, 0);

	// allocate batchPosition-to-lightmapPosition maps
	ctx->hemisphere.fbHemiToLightmapLocation = (lm_ivec2*)LM_CALLOC(ctx->hemisphere.fbHemiCountX * ctx->hemisphere.fbHemiCountY, sizeof(lm_ivec2));
	ctx->hemisphere.transfer.fbHemiToLightmapLocation = (lm_ivec2*)LM_CALLOC(ctx->hemisphere.fbHemiCountX * ctx->hemisphere.fbHemiCountY, sizeof(lm_ivec2));

	return ctx;
}

void lmDestroy(lm_context *ctx)
{
	bgfx::destroyUniform(ctx->hemisphere.hemispheresTextureUniform);
	bgfx::destroyUniform(ctx->hemisphere.weightsTextureUniform);
	bgfx::destroyUniform(ctx->hemisphere.textureSizeUniform);

	bgfx::destroyTexture(ctx->hemisphere.firstPass.weightsTexture);
	bgfx::destroyTexture(ctx->hemisphere.fbTexture[0]);
	bgfx::destroyTexture(ctx->hemisphere.fbTexture[1]);
	bgfx::destroyTexture(ctx->hemisphere.fbReadTexture);

	bgfx::destroyProgram(ctx->hemisphere.downsamplePass.programID);
	bgfx::destroyProgram(ctx->hemisphere.firstPass.programID);

	bgfx::destroyFrameBuffer(ctx->hemisphere.fb[0]);
	bgfx::destroyFrameBuffer(ctx->hemisphere.fb[1]);

#if LM_DEBUG
	bgfx::destroyTexture(ctx->hemisphere.debugReadTexture);
	LM_FREE(ctx->hemisphere.debugData);
#endif

	// free memory
	LM_FREE(ctx->hemisphere.transfer.data);
	LM_FREE(ctx->hemisphere.transfer.fbHemiToLightmapLocation);
	LM_FREE(ctx->hemisphere.fbHemiToLightmapLocation);
	LM_FREE(ctx);
}

void lmSetHemisphereWeights(lm_context *ctx, lm_weight_func f, void *userdata)
{
	// hemisphere weights texture. bakes in material dependent attenuation behaviour.
	float *weights = (float*)LM_CALLOC(2 * 3 * ctx->hemisphere.size * ctx->hemisphere.size, sizeof(float));
	float center = (ctx->hemisphere.size - 1) * 0.5f;
	double sum = 0.0;
	for (unsigned int y = 0; y < ctx->hemisphere.size; y++)
	{
		float dy = 2.0f * (y - center) / (float)ctx->hemisphere.size;
		for (unsigned int x = 0; x < ctx->hemisphere.size; x++)
		{
			float dx = 2.0f * (x - center) / (float)ctx->hemisphere.size;
			lm_vec3 v = lm_v3(dx, dy, 1.0f);
			float il2 = 1.0f / lm_length3sq(v);
			v = lm_normalize3(v);

			// center weights
			weights[2 * (y * 3 * ctx->hemisphere.size + x) + 0] = il2 * f(v.z, userdata);
			weights[2 * (y * 3 * ctx->hemisphere.size + x) + 1] = il2;

			// left/right side weights
			weights[2 * (y * 3 * ctx->hemisphere.size + ctx->hemisphere.size + x) + 0] = il2 * f(lm_absf(v.x), userdata);
			weights[2 * (y * 3 * ctx->hemisphere.size + ctx->hemisphere.size + x) + 1] = il2;

			// up/down side weights
			weights[2 * (y * 3 * ctx->hemisphere.size + 2 * ctx->hemisphere.size + x) + 0] = il2 * f(lm_absf(v.y), userdata);
			weights[2 * (y * 3 * ctx->hemisphere.size + 2 * ctx->hemisphere.size + x) + 1] = il2;

			sum += 3.0 * (double)il2;
		}
	}

	// normalize weights
	float weightScale = (float)(1.0 / sum);
	for (unsigned int i = 0; i < 2 * 3 * ctx->hemisphere.size * ctx->hemisphere.size; i++)
		weights[i] *= weightScale;

	// upload weight texture
	uint32_t weightsize = 2 * 3 * ctx->hemisphere.size * ctx->hemisphere.size * sizeof(float);
	const bgfx::Memory* mem = NULL;
	mem = bgfx::alloc(weightsize);
	memcpy(&mem->data[0], &weights[0], weightsize);
	ctx->hemisphere.firstPass.weightsTexture = bgfx::createTexture2D(3 * ctx->hemisphere.size, ctx->hemisphere.size, 1, bgfx::TextureFormat::RG32F, BGFX_TEXTURE_NONE, mem);
	LM_FREE(weights);
}

void lmSetTargetLightmap(lm_context *ctx, float *outLightmap, int w, int h, int c)
{
	ctx->lightmap.data = outLightmap;
	ctx->lightmap.width = w;
	ctx->lightmap.height = h;
	ctx->lightmap.channels = c;
}

void lmSetGeometry(lm_context *ctx,
	const float *transformationMatrix,
	lm_type positionsType, const void *positionsXYZ, int positionsStride,
	lm_type lightmapCoordsType, const void *lightmapCoordsUV, int lightmapCoordsStride,
	int count, lm_type indicesType, const void *indices)
{
	ctx->mesh.transform = transformationMatrix;
	ctx->mesh.positions = (const unsigned char*)positionsXYZ;
	ctx->mesh.positionsType = positionsType;
	ctx->mesh.positionsStride = positionsStride == 0 ? sizeof(lm_vec3) : positionsStride;
	ctx->mesh.uvs = (const unsigned char*)lightmapCoordsUV;
	ctx->mesh.uvsType = lightmapCoordsType;
	ctx->mesh.uvsStride = lightmapCoordsStride == 0 ? sizeof(lm_vec2) : lightmapCoordsStride;
	ctx->mesh.indicesType = indicesType;
	ctx->mesh.indices = (const unsigned char*)indices;
	ctx->mesh.count = count;

	lm_setMeshPosition(ctx, 0);
}

lm_bool lmBegin(lm_context *ctx, int* outViewport4, float* outView4x4, float* outProjection4x4, uint8_t* outbgfxView)
{
	assert(ctx->meshPosition.triangle.baseIndex < ctx->mesh.count);
	while (!lm_beginSampleHemisphere(ctx, outViewport4, outView4x4, outProjection4x4, outbgfxView))
	{ // as long as there are no hemisphere sides to render...
		// try moving to the next rasterizer position
		if (lm_findNextConservativeTriangleRasterizerPosition(ctx))
		{ // if we successfully moved to the next sample position on the current triangle...
			ctx->meshPosition.hemisphere.side = 0; // start sampling a hemisphere there
		}
		else
		{ // if there are no valid sample positions on the current triangle...
			if (ctx->meshPosition.triangle.baseIndex + 3 < ctx->mesh.count)
			{ // ...and there are triangles left: move to the next triangle and continue sampling.
				lm_setMeshPosition(ctx, ctx->meshPosition.triangle.baseIndex + 3);
			}
			else
			{ // ...and there are no triangles left: finish
				ctx->meshPosition.triangle.baseIndex = ctx->mesh.count; // set end condition (in case someone accidentally calls lmBegin again)
				lm_finishProcessHemisphereBatch(ctx); // finish pending batch
				lm_beginProcessHemisphereBatch(ctx); // start last batch, if there are unprocessed hemispheres
				lm_finishProcessHemisphereBatch(ctx); // finish last batch
				return LM_FALSE;
			}
		}
	}
	return LM_TRUE;
}

int lmProgress(lm_context *ctx)
{
	return ctx->meshPosition.triangle.baseIndex;
}

void lmEnd(lm_context *ctx)
{
	lm_endSampleHemisphere(ctx);
}

// these are not performance tuned since their impact on the whole lightmapping duration is insignificant
float lmImageMin(const float *image, int w, int h, int c, int m)
{
	assert(c > 0 && m);
	float minValue = FLT_MAX;
	for (int i = 0; i < w * h; i++)
		for (int j = 0; j < c; j++)
			if (m & (1 << j))
				minValue = lm_minf(minValue, image[i * c + j]);
	return minValue;
}

float lmImageMax(const float *image, int w, int h, int c, int m)
{
	assert(c > 0 && m);
	float maxValue = 0.0f;
	for (int i = 0; i < w * h; i++)
		for (int j = 0; j < c; j++)
			if (m & (1 << j))
				maxValue = lm_maxf(maxValue, image[i * c + j]);
	return maxValue;
}

void lmImageAdd(float *image, int w, int h, int c, float value, int m)
{
	assert(c > 0 && m);
	for (int i = 0; i < w * h; i++)
		for (int j = 0; j < c; j++)
			if (m & (1 << j))
				image[i * c + j] += value;
}

void lmImageScale(float *image, int w, int h, int c, float factor, int m)
{
	assert(c > 0 && m);
	for (int i = 0; i < w * h; i++)
		for (int j = 0; j < c; j++)
			if (m & (1 << j))
				image[i * c + j] *= factor;
}

void lmImagePower(float *image, int w, int h, int c, float exponent, int m)
{
	assert(c > 0 && m);
	for (int i = 0; i < w * h; i++)
		for (int j = 0; j < c; j++)
			if (m & (1 << j))
				image[i * c + j] = powf(image[i * c + j], exponent);
}

void lmImageDilate(const float *image, float *outImage, int w, int h, int c)
{
	assert(c > 0 && c <= 4);
	for (int y = 0; y < h; y++)
	{
		for (int x = 0; x < w; x++)
		{
			float color[4];
			lm_bool valid = LM_FALSE;
			for (int i = 0; i < c; i++)
			{
				color[i] = image[(y * w + x) * c + i];
				valid |= color[i] > 0.0f;
			}
			if (!valid)
			{
				int n = 0;
				const int dx[] = { -1, 0, 1,  0 };
				const int dy[] = {  0, 1, 0, -1 };
				for (int d = 0; d < 4; d++)
				{
					int cx = x + dx[d];
					int cy = y + dy[d];
					if (cx >= 0 && cx < w && cy >= 0 && cy < h)
					{
						float dcolor[4];
						lm_bool dvalid = LM_FALSE;
						for (int i = 0; i < c; i++)
						{
							dcolor[i] = image[(cy * w + cx) * c + i];
							dvalid |= dcolor[i] > 0.0f;
						}
						if (dvalid)
						{
							for (int i = 0; i < c; i++)
								color[i] += dcolor[i];
							n++;
						}
					}
				}
				if (n)
				{
					float in = 1.0f / n;
					for (int i = 0; i < c; i++)
						color[i] *= in;
				}
			}
			for (int i = 0; i < c; i++)
				outImage[(y * w + x) * c + i] = color[i];
		}
	}
}

void lmImageSmooth(const float *image, float *outImage, int w, int h, int c)
{
	assert(c > 0 && c <= 4);
	for (int y = 0; y < h; y++)
	{
		for (int x = 0; x < w; x++)
		{
			float color[4] = {0};
			int n = 0;
			for (int dy = -1; dy <= 1; dy++)
			{
				int cy = y + dy;
				for (int dx = -1; dx <= 1; dx++)
				{
					int cx = x + dx;
					if (cx >= 0 && cx < w && cy >= 0 && cy < h)
					{
						lm_bool valid = LM_FALSE;
						for (int i = 0; i < c; i++)
							valid |= image[(cy * w + cx) * c + i] > 0.0f;
						if (valid)
						{
							for (int i = 0; i < c; i++)
								color[i] += image[(cy * w + cx) * c + i];
							n++;
						}
					}
				}
			}
			for (int i = 0; i < c; i++)
				outImage[(y * w + x) * c + i] = n ? color[i] / n : 0.0f;
		}
	}
}

void lmImageDownsample(const float *image, float *outImage, int w, int h, int c)
{
	assert(c > 0 && c <= 4);
	for (int y = 0; y < h / 2; y++)
	{
		for (int x = 0; x < w / 2; x++)
		{
			int p0 = 2 * (y * w + x) * c;
			int p1 = p0 + w * c;
			int valid[2][2] = {0};
			float sums[4] = {0};
			for (int i = 0; i < c; i++)
			{
				valid[0][0] |= image[p0     + i] != 0.0f ? 1 : 0;
				valid[0][1] |= image[p0 + c + i] != 0.0f ? 1 : 0;
				valid[1][0] |= image[p1     + i] != 0.0f ? 1 : 0;
				valid[1][1] |= image[p1 + c + i] != 0.0f ? 1 : 0;
				sums[i] += image[p0 + i] + image[p0 + c + i] + image[p1 + i] + image[p1 + c + i];
			}
			int n = valid[0][0] + valid[0][1] + valid[1][0] + valid[1][1];
			int p = (y * w / 2 + x) * c;
			for (int i = 0; i < c; i++)
				outImage[p + i] = n ? sums[i] / n : 0.0f;
		}
	}
}

void lmImageFtoUB(const float *image, unsigned char *outImage, int w, int h, int c, float max)
{
	assert(c > 0);
	float scale = 255.0f / (max != 0.0f ? max : lmImageMax(image, w, h, c, LM_ALL_CHANNELS));
	for (int i = 0; i < w * h * c; i++)
		outImage[i] = (unsigned char)lm_minf(lm_maxf(image[i] * scale, 0.0f), 255.0f);
}

// TGA output helpers
static void lm_swapRandBub(unsigned char *image, int w, int h, int c)
{
	assert(c >= 3);
	for (int i = 0; i < w * h * c; i += c)
		LM_SWAP(unsigned char, image[i], image[i + 2]);
}

lm_bool lmImageSaveTGAub(const char *filename, const unsigned char *image, int w, int h, int c)
{
	assert(c == 1 || c == 3 || c == 4);
	lm_bool isGreyscale = c == 1;
	lm_bool hasAlpha = c == 4;
	unsigned char header[18] = {	(unsigned char)0, (unsigned char)0, (unsigned char)(isGreyscale ? 3 : 2), (unsigned char)0,
									(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
									(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)(w & 0xff),
									(unsigned char)((w >> 8) & 0xff), (unsigned char)(h & 0xff), (unsigned char)((h >> 8) & 0xff),
									(unsigned char)(8 * c), (unsigned char)(hasAlpha ? 8 : 0) };
#if defined(_MSC_VER) && _MSC_VER >= 1400
	FILE *file;
	if (fopen_s(&file, filename, "wb") != 0) return LM_FALSE;
#else
	FILE *file = fopen(filename, "wb");
	if (!file) return LM_FALSE;
#endif
	fwrite(header, 1, sizeof(header), file);

	// we make sure to swap it back! trust me. :)
	if (!isGreyscale)
		lm_swapRandBub((unsigned char*)image, w, h, c);
	fwrite(image, 1, w * h * c , file);
	if (!isGreyscale)
		lm_swapRandBub((unsigned char*)image, w, h, c);

	fclose(file);
	return LM_TRUE;
}

lm_bool lmImageSaveTGAf(const char *filename, const float *image, int w, int h, int c, float max)
{
	unsigned char *temp = (unsigned char*)LM_CALLOC(w * h * c, sizeof(unsigned char));
	lmImageFtoUB(image, temp, w, h, c, max);
	lm_bool success = lmImageSaveTGAub(filename, temp, w, h, c);
	LM_FREE(temp);
	return success;
}

#endif // LIGHTMAPPER_IMPLEMENTATION
